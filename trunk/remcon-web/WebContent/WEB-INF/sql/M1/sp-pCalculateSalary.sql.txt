DROP PROCEDURE if exists remcon.pCalculateSalary;
DROP PROCEDURE if exists remcon.pSaveOvertime;
DROP PROCEDURE IF EXISTS remcon.getGratificationAmount;
DROP FUNCTION if exists remcon.fGetGratificationAmount;
DROP FUNCTION if exists remcon.fSaveBookForEmployee;
DROP FUNCTION IF EXISTS remcon.fSalaryReceived;
DROP FUNCTION IF EXISTS remcon.fTotalIncomeTaxable;
DROP FUNCTION IF EXISTS remcon.fGetOvertimeAmount;
DROP FUNCTION IF EXISTS remcon.fGetLimitGratification;
DROP FUNCTION IF EXISTS remcon.fGetLimitTaxableForecast;
DROP FUNCTION IF EXISTS remcon.fGetLimitTaxableDismissInsurance;
DROP FUNCTION IF EXISTS remcon.fGetObligatoryQuote;
DROP FUNCTION IF EXISTS remcon.fGetPFMForBook;

DELIMITER $$

/************************/
CREATE PROCEDURE remcon.pCalculateSalary(IN pEmployee BIGINT, IN pDate DATE, IN pWorkDays INTEGER)
BEGIN
	DECLARE vPeriod, vBook BIGINT DEFAULT 0; 
	DECLARE vSalaryReceived, vGratificationAmount, 
			vTotalIncomeTaxable, vOvertimeAmount, 
			vLimitGratification, vLimitTaxableForecast,
			vLimitTaxableDismissInsurance, vObligatoryQuote DOUBLE DEFAULT 0;

	SELECT	cId
	INTO	vPeriod
	FROM	remcon.tPeriod
	WHERE	cDate = pDate;

	SET vBook = remcon.fSaveBookForEmployee(vPeriod, pEmployee, pWorkDays);
	
	CALL remcon.pSaveOvertime(vBook, pEmployee, vPeriod);
	
	SET vLimitGratification = fGetLimitGratification(vBook);
	UPDATE	remcon.tPeriod 
	SET		cLimitGratification = vLimitGratification 
	WHERE	cId = vPeriod;

	SET vSalaryReceived = fSalaryReceived(vBook);
	SET vGratificationAmount = fGetGratificationAmount(vBook);
	SET vTotalIncomeTaxable = fTotalIncomeTaxable(vBook);
	SET vOvertimeAmount = fGetOvertimeAmount(vBook);
	SET vLimitTaxableForecast = fGetLimitTaxableForecast(vBook);
	SET vLimitTaxableDismissInsurance = fGetLimitTaxableDismissInsurance(vBook);
	SET vObligatoryQuote = fGetObligatoryQuote(vBook);
	
		
	UPDATE	remcon.tBookAssets 
	SET		cGratificationAmount = vGratificationAmount,
			cTotalIncomeTaxable = vTotalIncomeTaxable,
			cOvertimeAmount = vOvertimeAmount
	WHERE	cBook = vBook;

	UPDATE	remcon.tBookDiscounts
	SET		cLimitTaxableForecast = vLimitTaxableForecast,
			cLimitTaxableDismissInsurance = vLimitTaxableDismissInsurance,
			cObligatoryQuote = vObligatoryQuote
	WHERE	cBook = vBook;

	UPDATE	remcon.tBook 
	SET		cSalaryReceived = vSalaryReceived 
	WHERE	cId = vBook;
	
END$$

/************************/
CREATE FUNCTION remcon.fTotalIncomeTaxable(pBook BIGINT) RETURNS DOUBLE
BEGIN
	DECLARE vOut DOUBLE DEFAULT 0;

	SELECT	cB01 + cB02 + cB03 + cB04 + cB05 + 
			cB06 + cB07 + cB08 + cB09 + cB10 +
			cGratificationAmount + cSalaryReceived 
	INTO	vOut
	FROM	remcon.vBook
	WHERE	cId = pBook;

	RETURN vOut;
END$$

/************************/
CREATE FUNCTION remcon.fSalaryReceived(pBook BIGINT) RETURNS DOUBLE
BEGIN
	DECLARE vOut DOUBLE DEFAULT 0;
	
	SELECT	(cSalaryRoot / 30) * cWorkDays INTO vOut
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	RETURN vOut;
END$$

/************************/
CREATE FUNCTION remcon.fSaveBookForEmployee(pPeriod BIGINT, pEmployee BIGINT, pWorkDays INTEGER) RETURNS BIGINT
BEGIN
	DECLARE vOut, vHorary, vGratificationType, vPFM, vHealth, vUnemploymentInsurance BIGINT DEFAULT 0;
	DECLARE vSalaryRoot DOUBLE DEFAULT 0;
	
	SELECT		b.cId 
	INTO		vOut
	FROM		remcon.tPeriod	AS a
	LEFT JOIN	remcon.tBook	AS b ON b.cPeriod = a.cId
	WHERE		b.cEmployee = pEmployee AND
				a.cId = pPeriod;

	SELECT	cHorary, cSalaryRoot, cGratificationType, cPFM, cHealth, cContractType
	INTO	vHorary, vSalaryRoot, vGratificationType, vPFM, vHealth, vUnemploymentInsurance
	FROM	remcon.tAgreement
	WHERE	cEmployee = pEmployee;
	
	SET vPFM = fGetPFMForBook(vPFM, pPeriod);
	
	IF (vOut != 0) THEN
		UPDATE	remcon.tBook
		SET		cPeriod = pPeriod,
				cEmployee = pEmployee,
				cHorary = vHorary,
				cWorkDays = pWorkDays,
				cSalaryRoot = vSalaryRoot,
				cOvertime = 0
		WHERE	cId = vOut;
		
		UPDATE	remcon.tBookAssets
		SET		cGratificationType = vGratificationType		
		WHERE	cBook = vOut;
		
		UPDATE	remcon.tBookDiscounts
		SET		cLimitTaxableForecast = 0,
				cPFMHistory = vPFM,
				cHealth = vHealth,
				cUnemploymentInsurance = vUnemploymentInsurance
		WHERE	cBook = vOut;
		
	ELSE
		INSERT INTO remcon.tBook(cPeriod, cEmployee, cHorary, cWorkDays, cSalaryRoot, cOvertime)
		VALUES(pPeriod, pEmployee, vHorary, pWorkDays, vSalaryRoot, 0);
		SET vOut = LAST_INSERT_ID();
		
		INSERT INTO remcon.tBookAssets(cBook, cGratificationType)
		VALUES(vOut, vGratificationType);
		
		INSERT INTO remcon.tBookDiscounts(cBook, cLimitTaxableForecast, cPFMHistory, cHealth, cUnemploymentInsurance)
		VALUES(vOut, 0, vPFM, vHealth, vUnemploymentInsurance);
	END IF;

	RETURN vOut;
END$$

/************************/
CREATE FUNCTION remcon.fGetPFMForBook(pPFM BIGINT, pPeriod BIGINT) RETURNS BIGINT
BEGIN
	DECLARE vOut BIGINT DEFAULT 0;
	DECLARE vKey VARCHAR(2) DEFAULT ' ';

	SELECT 	cKey
	INTO	vKey 
	FROM	remcon.tPFM
	WHERE	cId = pPFM;

	SELECT 	cId
	INTO	vOut 
	FROM	remcon.tPFMHistory
	WHERE	cKey = vKey AND cPeriod <= pPeriod
	ORDER BY cId DESC
	LIMIT 0, 1;
	
	RETURN vOut;
END$$


/************************/
CREATE PROCEDURE remcon.pSaveOvertime(IN pBook BIGINT, IN pEmployee BIGINT, IN pPeriod BIGINT)
BEGIN
	DECLARE pHours INTEGER DEFAULT 0;

	SELECT	SUM(cHours) INTO pHours 
	FROM	remcon.tOvertime
	WHERE	cEmployee = pEmployee AND 
			cPeriod = pPeriod;
	
	IF(pHours IS NULL) THEN
		SET pHours = 0;
	END IF;
	
	UPDATE	remcon.tBook 
	SET		cOvertime = pHours
	WHERE	cId = pBook;
	
END$$

/************************/
CREATE FUNCTION remcon.fGetGratificationAmount(pBook BIGINT) RETURNS DOUBLE
BEGIN
	DECLARE vOut, vSalaryReceived, vMinSalary, vOvertimeAmount, vParticipation,
			vB01, vB02, vB03, vB04, vB05, vB06, vB07, vB08, vB09, vB10,
			vLimit, vSumGratificaion DOUBLE DEFAULT 0;
	DECLARE vGratificationType BIGINT DEFAULT 0;
	
	SELECT	cGratificationType, cSalaryReceived, cMinSalary, cOvertimeAmount, cParticipation,
			cB01, cB02, cB03, cB04, cB05, cB06, cB07, cB08, cB09, cB10
	INTO	vGratificationType, vSalaryReceived, vMinSalary, vOvertimeAmount, vParticipation,
			vB01, vB02, vB03, vB04, vB05, vB06, vB07, vB08, vB09, vB10
	FROM	remcon.vBook
	WHERE	cId = pBook;
	 
	IF(vGratificationType = 1) THEN /* Sin Gratificacion */
		SET vOut = 0;
		
	ELSEIF (vGratificationType = 2) THEN /* Gratificacion : 25% Impo. (Tope 4,75imm/12)*/
		SET vLimit =  4.75 * vMinSalary;
		
		SET vSumGratificaion =	vSalaryReceived + vOvertimeAmount + vParticipation + 
								vB01 + vB02 + vB03 + vB04 + vB05 + 
								vB06 + vB07 + vB08 + vB09 + vB10;
								
		IF(vSumGratificaion * 0.25 > vLimit) THEN
			SET vOut = vLimit;
		ELSE
			SET vOut = vSumGratificaion * 0.25;

		END IF;
				
	ELSE /* Por antiguedad */
		SET vOut = vSalaryReceived * 0.25;
	END IF;
	
	RETURN vOut;
END$$

/************************/
CREATE FUNCTION remcon.fGetOvertimeAmount(pBook BIGINT) RETURNS DOUBLE
BEGIN
	DECLARE vOut DOUBLE DEFAULT 0;

	SELECT 	(a.cSalaryRoot * b.cOvertimeFactor) * a.cOvertime
	INTO	vOut 
	FROM	remcon.tBook		AS a
	LEFT JOIN remcon.tPeriod	AS b ON a.cPeriod = b.cId
	WHERE	a.cId = pBook;
	
	RETURN vOut;
END$$

/************************/
CREATE FUNCTION remcon.fGetLimitGratification(pBook BIGINT) RETURNS DOUBLE
BEGIN
/*4.75 Ingresos mínimos*/
	DECLARE vOut, vGratificationFactor DOUBLE DEFAULT 0;
	
	SELECT	cValue
	INTO	vGratificationFactor
	FROM	tParameter
	WHERE	cKey = 'GRATIFICATION_FACTOR';

	SELECT 	cMinSalary * vGratificationFactor
	INTO	vOut 
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	RETURN vOut;
END$$

/************************/
CREATE FUNCTION remcon.fGetLimitTaxableForecast(pBook BIGINT) RETURNS DOUBLE
BEGIN
/*4.75 Ingresos mínimos */
	DECLARE vOut, vGratificationFactor, vUFs DOUBLE DEFAULT 0;
	
	SELECT	cValue
	INTO	vUFs
	FROM	tParameter
	WHERE	cKey = 'LIMIT_IPS';

	SELECT 	(vUFs * cUF)
	INTO	vOut 
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	RETURN vOut;
END$$

CREATE FUNCTION remcon.fGetLimitTaxableDismissInsurance(pBook BIGINT) RETURNS DOUBLE
BEGIN
/* = SI(cTotalIncomeTaxable >= 90UF ; 90UF; cTotalIncomeTaxable) */
	DECLARE vTotalIncomeTaxable, vUFs, vLimit, vOut DOUBLE DEFAULT 0;
	
	SELECT	cValue
	INTO	vUFs
	FROM	tParameter
	WHERE	cKey = 'LIMIT_INSURANCE';
	
	SELECT 	cTotalIncomeTaxable, (cUF * vUFs)
	INTO	vTotalIncomeTaxable, vLimit
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	IF (vTotalIncomeTaxable >= vLimit) THEN
		SET vOut = vLimit;
	ELSE
		SET vOut = vTotalIncomeTaxable;
	END IF;
		
	RETURN vOut;
END$$

CREATE FUNCTION remcon.fGetObligatoryQuote(pBook BIGINT) RETURNS DOUBLE
BEGIN
/**
 SI(AFP=Cuprum		;TopeImponiblePrevicional*11.48;
 SI(AFP=Habitat		;TopeImponiblePrevicional*11.36;
 SI(AFP=Planvital	;TopeImponiblePrevicional*12.36;
 SI(AFP=Provida		;TopeImponiblePrevicional*11.54;
 SI(AFP=IngCapital	;TopeImponiblePrevicional*11.44;
 SI(AFP=Jubilado	;TopeImponiblePrevicional*0;
 SI(AFP=INP(EMPART)	;TopeImponiblePrevicional*21.84;
 SI(AFP=INP(Ex-SSS)	;TopeImponiblePrevicional*18.84;0))))))))
*/
	DECLARE vOut DOUBLE DEFAULT 0;
	
	
	
	
	RETURN vOut;
END$$

DELIMITER ;
