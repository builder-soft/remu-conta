DROP PROCEDURE if exists remcon.pCalculateSalary;
DROP PROCEDURE if exists remcon.pSaveOvertime;
DROP PROCEDURE if exists remcon.pGratificationAmount;
DROP PROCEDURE IF EXISTS remcon.pSalaryReceived;
DROP PROCEDURE IF EXISTS remcon.pTotalIncomeTaxable;
DROP PROCEDURE IF EXISTS remcon.pOvertimeAmount;
DROP PROCEDURE IF EXISTS remcon.pLimitTaxableForecast;
DROP PROCEDURE IF EXISTS remcon.pLimitTaxableDismissInsurance;
DROP PROCEDURE IF EXISTS remcon.pIncome;
DROP PROCEDURE IF EXISTS remcon.pAPV;
DROP PROCEDURE IF EXISTS remcon.pObligatoryQuote;
DROP PROCEDURE IF EXISTS remcon.pLawfulQuote;
DROP PROCEDURE IF EXISTS remcon.pAdditionalHealth;
DROP PROCEDURE IF EXISTS remcon.pUnemploymentInsuranceAmount;
DROP PROCEDURE IF EXISTS remcon.pFamilyAssignment;
DROP PROCEDURE IF EXISTS remcon.pUniqueTax;
DROP PROCEDURE IF EXISTS remcon.pProportionalHoliday;
DROP PROCEDURE IF EXISTS remcon.pSubtotalLawfulDiscounts;
DROP PROCEDURE IF EXISTS remcon.pSubtotalOtherDiscounts;
DROP PROCEDURE IF EXISTS remcon.pNetPaymentScope;
DROP PROCEDURE IF EXISTS remcon.pTotalIncomeNotTaxable;
DROP PROCEDURE IF EXISTS remcon.pTotalIncome;
DROP PROCEDURE IF EXISTS remcon.pToPayEmployee;
DROP PROCEDURE IF EXISTS remcon.pInsuranceAmountEnterprise;
DROP PROCEDURE IF EXISTS remcon.pPayToMutulEnterprise;
DROP PROCEDURE IF EXISTS remcon.pFamilyAssignmentEnterprise;
DROP PROCEDURE IF EXISTS remcon.pCostEnterprise;
DROP PROCEDURE IF EXISTS remcon.pAdditionalPFM;

DROP FUNCTION IF exists remcon.fSaveBookForEmployee;
DROP FUNCTION IF EXISTS remcon.fGetPFMForBook;
DROP FUNCTION IF EXISTS remcon.fGetHealthForBook;
DROP FUNCTION IF EXISTS remcon.fBusinessDate;
DROP FUNCTION IF EXISTS remcon.fHoliday;
DROP FUNCTION IF EXISTS remcon.fSalaryDaily;

DELIMITER $$

/************************/
CREATE PROCEDURE remcon.pCalculateSalary(IN pEmployee BIGINT, IN vPeriod BIGINT)
BEGIN
	DECLARE vBook BIGINT DEFAULT 0; 
/*
	SELECT	cId
	INTO	vPeriod
	FROM	remcon.tPeriod
	WHERE	cDate = pDate;
*/
	SET vBook = remcon.fSaveBookForEmployee(vPeriod, pEmployee);
	
	CALL remcon.pSaveOvertime(vBook, pEmployee, vPeriod);
	CALL remcon.pSalaryReceived(vBook);
	CALL remcon.pGratificationAmount(vBook);
	CALL remcon.pOvertimeAmount(vBook);
	CALL remcon.pTotalIncomeTaxable(vBook);
	CALL remcon.pLimitTaxableForecast(vBook);
	CALL remcon.pLimitTaxableDismissInsurance(vBook);
	CALL remcon.pObligatoryQuote(vBook);
	CALL remcon.pLawfulQuote(vBook);
	CALL remcon.pAPV(vBook);
	CALL remcon.pAdditionalPFM(vBook);
	CALL remcon.pAdditionalHealth(vBook);
	CALL remcon.pUnemploymentInsuranceAmount(vBook);
	CALL remcon.pFamilyAssignment(vBook);
	
/*	=SI(+AY13+AZ13<=(4,2*PARAMETROS!$D$10);AY13+AZ13;4,2*PARAMETROS!$D$10)*/
	
	CALL remcon.pIncome(vBook);
	CALL remcon.pUniqueTax(vBook);
	CALL remcon.pProportionalHoliday(vBook);
	CALL remcon.pSubtotalLawfulDiscounts(vBook);
	CALL remcon.pSubtotalOtherDiscounts(vBook);

	CALL remcon.pTotalIncomeNotTaxable(vBook);
	CALL remcon.pTotalIncome(vBook);
	
	CALL remcon.pNetPaymentScope(vBook);
	
	CALL remcon.pToPayEmployee(vBook);
	
	CALL remcon.pInsuranceAmountEnterprise(vBook);
	CALL remcon.pPayToMutulEnterprise(vBook);
	CALL remcon.pFamilyAssignmentEnterprise(vBook);
	CALL remcon.pCostEnterprise(vBook);
	
END$$

CREATE PROCEDURE remcon.pCostEnterprise(pBook BIGINT)
BEGIN
	DECLARE	vCostEnterprise DOUBLE DEFAULT 0;

	SELECT		cTotalIncome + cInsuranceAmountEnterprise + cPayToMutulEnterprise + 
				cPayToMutulEnterprise + cFamilyAssignmentEnterprise
	INTO		vCostEnterprise
	FROM		remcon.vBook
	WHERE		cId = pBook;

	UPDATE	remcon.tBook
	SET		cCostEnterprise	= vCostEnterprise
	WHERE	cId = pBook;

END$$

CREATE PROCEDURE remcon.pFamilyAssignmentEnterprise(pBook BIGINT)
BEGIN
	DECLARE	vFamilyAssignmentEnterprise DOUBLE DEFAULT 0;

	SELECT		cFamilyAssignmentAmount + cFamilyRetroactive
	INTO		vFamilyAssignmentEnterprise
	FROM		remcon.vBook
	WHERE		cId = pBook;

	UPDATE	remcon.tBook
	SET		cFamilyAssignmentEnterprise	= vFamilyAssignmentEnterprise
	WHERE	cId = pBook;

END$$

CREATE PROCEDURE remcon.pPayToMutulEnterprise(pBook BIGINT)
BEGIN
	DECLARE	vMutualFactor, vLimitTaxableForecast DOUBLE DEFAULT 0;

	SELECT		f.cMutualFactor, a.cLimitTaxableForecast
	INTO		vMutualFactor, vLimitTaxableForecast
	FROM		remcon.vBook AS a
	LEFT JOIN	remcon.tAgreement	AS b ON a.cAgreement = b.cId
	LEFT JOIN	remcon.tProfile		AS c ON b.cProfile = c.cId
	LEFT JOIN	remcon.tCostCenter	AS d ON c.cCostCenter = d.cId
	LEFT JOIN	remcon.tBranch		AS e ON d.cBranch = e.cId
	LEFT JOIN	remcon.tEnterprise	AS f ON e.cEnterprise = f.cId
	WHERE		a.cId = pBook;

	UPDATE	remcon.tBook
	SET		cMutualFactor			= vMutualFactor,
			cPayToMutulEnterprise	= vMutualFactor * vLimitTaxableForecast
	WHERE	cId = pBook;

END$$

CREATE PROCEDURE remcon.pInsuranceAmountEnterprise(pBook BIGINT)
BEGIN
	DECLARE	vInsuranceAmountEnterprise, vInsuranceFactorEnterprise, vInsuranceFactorEmployee, 
			vLimitTaxableDismissInsurance DOUBLE DEFAULT 0;

	SELECT	b.cInsuranceFactorEmployee,	b.cInsuranceFactorEnterprise,	a.cLimitTaxableDismissInsurance
	INTO	vInsuranceFactorEmployee,	vInsuranceFactorEnterprise,		vLimitTaxableDismissInsurance
	FROM	remcon.vBook AS a
	LEFT JOIN	remcon.tContractType AS b ON a.cContractType = b.cId
	WHERE	a.cId = pBook;
	
	/*el empleador cubre un 2.4% y el 0.6% lo cancela el trabajador (descuento)*/
	UPDATE	remcon.tBook
	SET		cInsuranceAmountEnterprise = vInsuranceFactorEnterprise * vLimitTaxableDismissInsurance,
			cInsuranceFactorEmployee = vInsuranceFactorEmployee,
			cInsuranceFactorEnterprise = vInsuranceFactorEnterprise
	WHERE	cId = pBook;
	
/*
	UPDATE	remcon.tBook
	SET		cToPayEmployee = vToPayEmployee
	WHERE	cId = pBook;
*/
END$$


CREATE PROCEDURE remcon.pToPayEmployee(pBook BIGINT)
BEGIN
	DECLARE	vToPayEmployee DOUBLE DEFAULT 0;
	
	SELECT	cNetPaymentScope - cAdvance
	INTO	vToPayEmployee
	FROM	vBook
	WHERE	cId = pBook;
	
	UPDATE	remcon.tBook
	SET		cToPayEmployee = vToPayEmployee
	WHERE	cId = pBook;

END$$

CREATE PROCEDURE remcon.pTotalIncomeNotTaxable(pBook BIGINT)
BEGIN
	DECLARE	vTotalIncomeNotTaxable DOUBLE DEFAULT 0;
	
	SELECT	cFamilyAssignmentAmount + cFamilyRetroactive + cFeeding + 
			cMobilization + cBounty + cMonthNotification + cIAS + 
			cProportionalHoliday + cVoluntaryIndenmization
	INTO	vTotalIncomeNotTaxable
	FROM	vBook
	WHERE	cId = pBook;
	
	UPDATE	remcon.tBookAssets
	SET		cTotalIncomeNotTaxable = vTotalIncomeNotTaxable
	WHERE	cId = pBook;

END$$

CREATE PROCEDURE remcon.pNetPaymentScope(pBook BIGINT)
BEGIN
	DECLARE	vNetPaymentScope DOUBLE DEFAULT 0;
	
	SELECT	cTotalIncome - cTotalDiscounts
	INTO	vNetPaymentScope
	FROM	vBook
	WHERE	cId = pBook;
	
	UPDATE	remcon.tBook 
	SET		cNetPaymentScope = vNetPaymentScope
	WHERE	cId = pBook;

END$$

CREATE PROCEDURE remcon.pTotalIncome(pBook BIGINT)
BEGIN
	DECLARE	vTotalIncome DOUBLE DEFAULT 0;
	
	SELECT	cTotalIncomeTaxable + cTotalIncomeNotTaxable
	INTO	vTotalIncome
	FROM	vBook
	WHERE	cId = pBook;
	
	UPDATE	remcon.tBookAssets 
	SET		cTotalIncome = vTotalIncome
	WHERE	cId = pBook;

END$$

CREATE PROCEDURE remcon.pSubtotalOtherDiscounts(pBook BIGINT)
BEGIN
	
	UPDATE	remcon.tBookDiscounts 
	SET		cSubtotalOtherDiscounts = cLoanEnterprise + cLoanCompensationFund + 
			cSavingCompensationFund + cJudicialRetention
	WHERE	cBook = pBook;

END$$


CREATE PROCEDURE remcon.pSubtotalLawfulDiscounts(pBook BIGINT)
BEGIN
	
	UPDATE	remcon.tBookDiscounts 
	SET		cSubtotalLawfulDiscounts = cObligatoryQuote + cAPVAmount + cHealthQuote + 
			cUnemploymentInsuranceAmount + cUniqueTax
	WHERE	cBook = pBook;

END$$

CREATE PROCEDURE remcon.pProportionalHoliday(pBook BIGINT)
/* Cálculo de vacaciones proporcionales 
Ref.: http://www.dt.gob.cl/consultas/1613/w3-article-60200.html

TODO: falta descontar los días de vacaciones.
*/
BEGIN
	DECLARE vDaysForYear INTEGER DEFAULT 15;
	DECLARE vDailyFactor, vDateDiff, vIndemnify, vIndemnifyDays DOUBLE DEFAULT 0;
	DECLARE vStartContract, vEndContract, vDate, vBusinessDate DATE;
	
	SELECT	cDaysForYear, cStartContract, cEndContract, cDate
	INTO	vDaysForYear, vStartContract, vEndContract, vDate
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	SET vDateDiff = DateDiff(vEndContract, vStartContract);
	SET vDailyFactor = round((vDaysForYear / 12) / 30, 5);
	
	SET vIndemnify = vDailyFactor * vDateDiff;
	SET vBusinessDate = remcon.fBusinessDate(vEndContract, vIndemnify);
	SET vIndemnifyDays = (vIndemnify - FLOOR(vIndemnify)) + DateDiff(vBusinessDate, vEndContract);
	
	/*select vEndContract, FLOOR(vIndemnify), vIndemnify, vBusinessDate, vIndemnifyDays;*/
	
	UPDATE	remcon.tBookAssets 
	SET		cProportionalHoliday = vIndemnifyDays * remcon.fSalaryDaily(pBook)
	WHERE	cBook = pBook;

END$$

CREATE FUNCTION remcon.fSalaryDaily(pBook BIGINT) RETURNS DOUBLE
BEGIN
	DECLARE vOut DOUBLE DEFAULT 0;
	
	SELECT	cSalaryRoot / 30
	INTO	vOut
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	RETURN vOut;
END$$ 

/* Funcion que retorma la fecha que resulta de la fecha inicial más los días que se pasan por parámetro */
CREATE FUNCTION remcon.fBusinessDate(vStartDay DATE, vCountDays DOUBLE) RETURNS DATE
BEGIN
	DECLARE vIndexDay DATE;
	DECLARE vIndex DOUBLE DEFAULT 0;
	DECLARE vDayOfWeek INTEGER DEFAULT -1;
	
	SET vIndexDay = vStartDay;
	WHILE vIndex < vCountDays DO
		SET vIndexDay = vIndexDay + INTERVAL 1 DAY;
		SET vIndex = vIndex + 1;
		
		SET vDayOfWeek = DAYOFWEEK(vIndexDay);
		
		IF(vDayOfWeek = 1 OR vDayOfWeek = 7 OR remcon.fHoliday(vIndexDay)) THEN
			SET vIndex = vIndex - 1;
		END IF;
	END WHILE;
	
	RETURN vIndexDay;
END$$

/* Funcion que retorna si una fecha es feriada o no */
CREATE FUNCTION remcon.fHoliday(vDate DATE) RETURNS BOOLEAN
BEGIN
	DECLARE vOut BOOLEAN DEFAULT FALSE;
	
	IF(EXISTS(SELECT cDate FROM tFiscalDate WHERE cDate = vDate)) THEN
		SET vOut = TRUE; 
	END IF;
	
	RETURN vOut;
END$$

/*****************************/
CREATE PROCEDURE remcon.pUniqueTax(pBook BIGINT)
BEGIN
	DECLARE vUTM, vIncome, vUniqueTax, vFactor DOUBLE DEFAULT 0;
	DECLARE vPeriod BIGINT DEFAULT 0;
	
	SELECT	cUTM, cPeriod, cIncome
	INTO	vUTM, vPeriod, vIncome
	FROM	remcon.vBook
	WHERE	cId = pBook;

	SELECT	vIncome * cFactor - (cDiscount*vUTM) 
	INTO	vUniqueTax
	FROM	tUniqueTax
	WHERE	cPeriod = vPeriod AND cLimit * vUTM < vIncome
	ORDER BY (cLimit * vUTM) DESC
	LIMIT 0,1;

	UPDATE	remcon.tBookDiscounts
	SET		cUniqueTax  = vUniqueTax
	WHERE	cBook = pBook;
	
END$$
/************************/
CREATE PROCEDURE remcon.pFamilyAssignment(pBook BIGINT)
BEGIN
	DECLARE vFamilyAssignmentCount INTEGER DEFAULT 0;
	DECLARE vAgreement, vFamilyAssignmentStretch BIGINT DEFAULT 0;
	DECLARE vFamilyAssignmentAmount, vFamilyAssignmentUnique DOUBLE DEFAULT 0;
	
	SELECT	cAgreement
	INTO	vAgreement
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	SELECT	a.cFamilyAssignmentStretch,	b.cAmount,					a.cSimpleLoads + a.cDisabilityBurdens + a.cMaternalLoads
	INTO	vFamilyAssignmentStretch,	vFamilyAssignmentUnique,	vFamilyAssignmentCount
	FROM	remcon.tAgreement AS a
	LEFT JOIN tFamilyAssignmentStretchHistory AS b ON a.cFamilyAssignmentStretch = b.cId
	WHERE	a.cId = vAgreement;
	
	SET vFamilyAssignmentAmount = vFamilyAssignmentUnique * vFamilyAssignmentCount;

	UPDATE	remcon.tBookAssets 
	SET		cFamilyAssignmentStretch = vFamilyAssignmentStretch,
			cFamilyAssignmentCount = vFamilyAssignmentCount,
			cFamilyAssignmentAmount = vFamilyAssignmentAmount
	WHERE	cBook = pBook;

END$$

/************************/
CREATE PROCEDURE remcon.pUnemploymentInsuranceAmount(pBook BIGINT)
BEGIN
	DECLARE vInsuranceFactorEmployee, vUnemploymentInsuranceAmount,
			vLimitTaxableDismissInsurance DOUBLE DEFAULT 0;
	DECLARE vContractType BIGINT DEFAULT 0;

	SELECT	cContractType, cInsuranceFactorEmployee, cLimitTaxableDismissInsurance
	INTO	vContractType, vInsuranceFactorEmployee, vLimitTaxableDismissInsurance
	FROM	remcon.vBook
	WHERE	cId = pBook;

	IF(vContractType = 1) THEN
		SET vUnemploymentInsuranceAmount = vInsuranceFactorEmployee * vLimitTaxableDismissInsurance;
	END IF;
	
	UPDATE	remcon.tBookDiscounts 
	SET		cUnemploymentInsuranceAmount = vUnemploymentInsuranceAmount
	WHERE	cBook = pBook;
	
END$$

CREATE PROCEDURE remcon.pLawfulQuote(pBook BIGINT)
/*
 * Siempre se calcula en % basado en el valor de cHealthHistory. El resto de los calculos, aplican para el complementario
 * 
 * moneda = AV13;
 * =SI(moneda=pesos) then -- nunca debe ser en $
 * 		7
 * else 
 * 		SI(moneda=UF) then
 * 			7*PARAMETROS!$D$10;
 * 		else
 * 			SI(moneda=%) then 
 * 				(7/100)*cLimitTaxableForecast
 * 			else 
 * 				0
 *			end
 *		end
 * end
 * */
BEGIN
	DECLARE vFactor, vLimitTaxableForecast DOUBLE DEFAULT 0;
	DECLARE vHealth BIGINT DEFAULT 0;

	SELECT	cHealthHistory, cLimitTaxableForecast
	INTO	vHealth, vLimitTaxableForecast
	FROM	remcon.vBook
	WHERE	cId = pBook;

	SELECT	cFactor
	INTO	vFactor
	FROM	tHealthHistory
	WHERE	cId = vHealth;
	
	UPDATE	remcon.tBookDiscounts 
	SET		cLawfulQuote = (vFactor/100) * vLimitTaxableForecast
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pAdditionalHealth(pBook BIGINT)
BEGIN
	DECLARE vAdditionalHealthCurrency, vAgreement BIGINT DEFAULT 0;
	DECLARE vAdditionalHealthAmount, vUF, vAdditionalHealthCLP, vHealthQuote,
			vLimitHealth DOUBLE DEFAULT 0;
	DECLARE vKey VARCHAR(3) DEFAULT '   ';
	
	SELECT	cAgreement, cUF, cLimitHealth
	INTO	vAgreement, vUF, vLimitHealth
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	SELECT	a.cAdditionalHealthCurrency, a.cAdditionalHealthAmount, b.cKey
	INTO	vAdditionalHealthCurrency, vAdditionalHealthAmount, vKey
	FROM	remcon.tAgreement AS a
	LEFT JOIN tCurrency AS b ON a.cAdditionalHealthCurrency = b.cId
	WHERE	a.cId = vAgreement;
	
	IF(vAdditionalHealthCurrency IS NULL) THEN
		SET vAdditionalHealthCLP = 0;
	ELSE
		IF(vKey = 'UF') THEN
			SET vAdditionalHealthCLP = vAdditionalHealthAmount * vUF;
		ELSE
			SET vAdditionalHealthCLP = vAdditionalHealthAmount;
		END IF;
	END IF;

	IF(vAdditionalHealthCLP > vLimitHealth * vUF) THEN
		SET vHealthQuote = vLimitHealth * vUF;
	ELSE
		SET vHealthQuote = vAdditionalHealthCLP;
	END IF;
	
	UPDATE	remcon.tBookDiscounts
	SET		cAdditionalHealthCurrency = vAdditionalHealthCurrency, 
			cAdditionalHealthAmount = vAdditionalHealthAmount,
			cAdditionalHealthCLP = vAdditionalHealthCLP,
			cHealthQuote = vHealthQuote
	WHERE	cBook = pBook;
	
END $$
/************************/
CREATE PROCEDURE remcon.pTotalIncomeTaxable(pBook BIGINT)
BEGIN
	DECLARE vOut DOUBLE DEFAULT 0;

	SELECT	cB01 + cB02 + cB03 + cB04 + cB05 + 
			cB06 + cB07 + cB08 + cB09 + cB10 +
			cSalaryReceived + cGratificationAmount + cOvertimeAmount 
	INTO	vOut
	FROM	remcon.vBook
	WHERE	cId = pBook;

	UPDATE	remcon.tBookAssets 
	SET		cTotalIncomeTaxable = vOut
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pSalaryReceived(pBook BIGINT)
BEGIN
	UPDATE	remcon.tBook 
	SET		cSalaryReceived = cSalaryRoot / 30 * cWorkDays 
	WHERE	cId = pBook;
	
END$$

/************************/
CREATE FUNCTION remcon.fSaveBookForEmployee(pPeriod BIGINT, pEmployee BIGINT) RETURNS BIGINT
BEGIN
	DECLARE vOut, vHorary, vGratificationType, vPFM, vHealth, vUnemploymentInsurance,
			vContractType, vInsuranceFactorEmployee, vInsuranceFactorEnterprise,
			vExBoxSystem BIGINT DEFAULT 0;
	DECLARE vSalaryRoot DOUBLE DEFAULT 0;
	DECLARE vPensionary BIT DEFAULT 0;
	DECLARE	vSimpleLoads, vDisabilityBurdens, vMaternalLoads INTEGER DEFAULT 0;

	SELECT		b.cId
	INTO		vOut
	FROM		remcon.tPeriod	AS a
	LEFT JOIN	remcon.tBook	AS b ON b.cPeriod = a.cId
	WHERE		b.cEmployee = pEmployee AND
				a.cId = pPeriod;

	SELECT	a.cHorary, a.cSalaryRoot, a.cGratificationType, a.cPFM, a.cHealth, a.cContractType, 
			b.cInsuranceFactorEmployee, b.cInsuranceFactorEnterprise, cExBoxSystem,
			a.cPensionary, a.cSimpleLoads, a.cDisabilityBurdens, a.cMaternalLoads
	INTO	vHorary, vSalaryRoot, vGratificationType, vPFM, vHealth, vContractType,
			vInsuranceFactorEmployee, vInsuranceFactorEnterprise, vExBoxSystem,
			vPensionary, vSimpleLoads, vDisabilityBurdens, vMaternalLoads
	FROM	remcon.tAgreement AS a
	LEFT JOIN remcon.tContractType AS b ON a.cContractType = b.cId
	WHERE	a.cEmployee = pEmployee;
	
	SET vPFM = fGetPFMForBook(vPFM, pPeriod);
	SET vHealth = fGetHealthForBook(vHealth, pPeriod);
	
	IF (vOut != 0) THEN
		UPDATE	remcon.tBook
		SET		cPeriod = pPeriod,
				cEmployee = pEmployee,
				cHorary = vHorary,
				cSalaryRoot = vSalaryRoot,
				cContractType = vContractType,
				cInsuranceFactorEmployee = vInsuranceFactorEmployee,
				cInsuranceFactorEnterprise = vInsuranceFactorEnterprise,
				cPensionary = vPensionary
		WHERE	cId = vOut;
		
		UPDATE	remcon.tBookAssets
		SET		cGratificationType = vGratificationType,
				cSimpleLoads = vSimpleLoads, 
				cDisabilityBurdens = vDisabilityBurdens, 
				cMaternalLoads = vMaternalLoads
		WHERE	cBook = vOut;
		
		UPDATE	remcon.tBookDiscounts
		SET		cLimitTaxableForecast = 0,
				cPFMHistory = vPFM,
				cExBoxSystem = vExBoxSystem,
				cHealthHistory = vHealth
		WHERE	cBook = vOut;
		
	ELSE
		INSERT INTO remcon.tBook(cPeriod, cEmployee, cHorary, cSalaryRoot, cContractType,
					cInsuranceFactorEmployee, cInsuranceFactorEnterprise, cPensionary)
		VALUES(pPeriod, pEmployee, vHorary, vSalaryRoot, vContractType,
					vInsuranceFactorEmployee, vInsuranceFactorEnterprise, vPensionary);
		SET vOut = LAST_INSERT_ID();
		
		INSERT INTO remcon.tBookAssets(cBook, cGratificationType, cSimpleLoads, cDisabilityBurdens, cMaternalLoads )
		VALUES(vOut, vGratificationType, vSimpleLoads, vDisabilityBurdens, vMaternalLoads );
	
		INSERT INTO remcon.tBookDiscounts(cBook, cLimitTaxableForecast, cPFMHistory, cHealthHistory, cExBoxSystem)
		VALUES(vOut, 0, vPFM, vHealth, vExBoxSystem);
	END IF;

	RETURN vOut;
END$$

/************************/
CREATE FUNCTION remcon.fGetPFMForBook(pPFM BIGINT, pPeriod BIGINT) RETURNS BIGINT
BEGIN
	DECLARE vOut BIGINT DEFAULT 0;
	DECLARE vKey VARCHAR(2) DEFAULT ' ';

	SELECT 	cKey
	INTO	vKey 
	FROM	remcon.tPFM
	WHERE	cId = pPFM;

	SELECT 	cId
	INTO	vOut 
	FROM	remcon.tPFMHistory
	WHERE	cKey = vKey AND cPeriod <= pPeriod
	ORDER BY cId DESC
	LIMIT 0, 1;
	
	RETURN vOut;
END$$

/************************/
CREATE FUNCTION remcon.fGetHealthForBook(pHealth BIGINT, pPeriod BIGINT) RETURNS BIGINT
BEGIN
	DECLARE vOut BIGINT DEFAULT 0;
	DECLARE vKey VARCHAR(2) DEFAULT ' ';

	SELECT 	cKey
	INTO	vKey 
	FROM	remcon.tHealth
	WHERE	cId = pHealth;

	SELECT 	cId
	INTO	vOut 
	FROM	remcon.tHealthHistory
	WHERE	cKey = vKey AND cPeriod <= pPeriod
	ORDER BY cId DESC
	LIMIT 0, 1;
	
	RETURN vOut;
END$$

/************************/
CREATE PROCEDURE remcon.pSaveOvertime(IN pBook BIGINT, IN pEmployee BIGINT, IN pPeriod BIGINT)
BEGIN
	DECLARE pHours INTEGER DEFAULT 0;
	
	SELECT	SUM(cHours) INTO pHours 
	FROM	remcon.tOvertime
	WHERE	cEmployee = pEmployee AND 
			cPeriod = pPeriod;
	
	IF(pHours IS NULL) THEN
		SET pHours = 0;
	END IF;
	
	UPDATE	remcon.tBook 
	SET		cOvertime = pHours
	WHERE	cId = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pGratificationAmount(pBook BIGINT)
BEGIN
	DECLARE vOut, vSalaryReceived, vMinSalary, vOvertimeAmount, vParticipation,
			vB01, vB02, vB03, vB04, vB05, vB06, vB07, vB08, vB09, vB10,
			vLimit, vSumGratificaion, vLimitGratification DOUBLE DEFAULT 0;
	DECLARE vGratificationType BIGINT DEFAULT 0;
	
	SELECT	cGratificationType, cSalaryReceived, cMinSalary, cOvertimeAmount, cParticipation,
			cB01, cB02, cB03, cB04, cB05, cB06, cB07, cB08, cB09, cB10, cLimitGratification
	INTO	vGratificationType, vSalaryReceived, vMinSalary, vOvertimeAmount, vParticipation,
			vB01, vB02, vB03, vB04, vB05, vB06, vB07, vB08, vB09, vB10, vLimitGratification
	FROM	remcon.vBook
	WHERE	cId = pBook;
	 
	IF(vGratificationType = 1) THEN /* Sin Gratificacion */
		SET vOut = 0;
		
	ELSEIF (vGratificationType = 2) THEN /* Gratificacion : 25% Impo. (Tope 4,75imm/12)*/
		SET vSumGratificaion =	vSalaryReceived + vOvertimeAmount + vParticipation + 
								vB01 + vB02 + vB03 + vB04 + vB05 + 
								vB06 + vB07 + vB08 + vB09 + vB10;
								
		IF(vSumGratificaion * 0.25 > vLimitGratification) THEN
			SET vOut = vLimitGratification;
		ELSE
			SET vOut = vSumGratificaion * 0.25;

		END IF;
				
	ELSE /* Por antiguedad */
		SET vOut = vSalaryReceived * 0.25;
	END IF;
	
	UPDATE	remcon.tBookAssets 
	SET		cGratificationAmount = vOut
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pOvertimeAmount(pBook BIGINT) 
BEGIN
	DECLARE vOut DOUBLE DEFAULT 0;

	SELECT 	(a.cSalaryRoot * b.cOvertimeFactor) * a.cOvertime
	INTO	vOut 
	FROM	remcon.tBook		AS a
	LEFT JOIN remcon.tPeriod	AS b ON a.cPeriod = b.cId
	WHERE	a.cId = pBook;
	
	UPDATE	remcon.tBookAssets 
	SET		cOvertimeAmount = vOut
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pLimitTaxableForecast(pBook BIGINT)
BEGIN
	DECLARE vOut, vLimitIPSasCLP, vTotalIncomeTaxable DOUBLE DEFAULT 0;
	
	SELECT 	(cLimitIPS * cUF), cTotalIncomeTaxable 
	INTO	vLimitIPSasCLP, vTotalIncomeTaxable
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	IF(vTotalIncomeTaxable>=vLimitIPSasCLP) THEN
		SET vOut = vLimitIPSasCLP;
	ELSE
		SET vOut = vTotalIncomeTaxable;
	END IF;
	
	UPDATE	remcon.tBookDiscounts
	SET		cLimitTaxableForecast = vOut
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pLimitTaxableDismissInsurance(pBook BIGINT)
BEGIN
/* = SI(cTotalIncomeTaxable >= 90UF ; 90UF; cTotalIncomeTaxable) */
	DECLARE vTotalIncomeTaxable, vUFs, vLimit, vOut DOUBLE DEFAULT 0;

	SELECT 	cTotalIncomeTaxable, (cUF * cLimitInsurance)
	INTO	vTotalIncomeTaxable, vLimit
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	IF (vTotalIncomeTaxable >= vLimit) THEN
		SET vOut = vLimit;
	ELSE
		SET vOut = vTotalIncomeTaxable;
	END IF;
		
	UPDATE	remcon.tBookDiscounts
	SET		cLimitTaxableDismissInsurance = vOut
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pAPV(pBook BIGINT)
BEGIN
	DECLARE vAgreement, vPeriod, vAPV, vCurrency BIGINT DEFAULT 0;
	DECLARE vDone BOOLEAN DEFAULT FALSE;
	DECLARE vAmount, vUF, vSum DOUBLE DEFAULT 0;
	DECLARE vKey VARCHAR(3) DEFAULT '   ';
	DECLARE cursorAPV CURSOR FOR
		SELECT	a.cAmount, b.cKey  
		FROM	remcon.tR_AgreementAPVHistory AS a
		LEFT JOIN	remcon.tCurrency	AS b ON a.cCurrency = b.cId
		LEFT JOIN	remcon.vBook		AS c ON a.cPeriod = c.cPeriod
		WHERE	c.cId = pBook AND a.cAgreement = c.cAgreement;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET vDone = TRUE;
	
	SET vUF = (SELECT cUF FROM vBook WHERE cId = pBook);
	OPEN cursorAPV;
	cursorAPV_loop: LOOP
		FETCH cursorAPV INTO vAmount, vKey;
		
		IF(vDone) THEN 
			LEAVE cursorAPV_loop;
		END IF;
		
		IF(vKey = 'UF') THEN
			SET vAmount = vAmount * vUF;
		END IF;
	    SET vSum = vSum + vAmount;
		
	END LOOP cursorAPV_loop;
	CLOSE cursorAPV;

	UPDATE	remcon.tBookDiscounts
	SET		cAPVAmount = vSum
	WHERE	cBook = pBook;

END $$

/************************/
CREATE PROCEDURE remcon.pAdditionalPFM(pBook BIGINT)
BEGIN
	DECLARE vAdditionalPFMAmount, vAdditionalPFMCLP, vUF DOUBLE DEFAULT 0;
	DECLARE vAdditionalPFMCurrency, vAgreement BIGINT DEFAULT 0;
	
	SELECT	cAgreement, cUF
	INTO	vAgreement, vUF
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	SELECT	cAdditionalPFMAmount, cAdditionalPFMCurrency
	INTO	vAdditionalPFMAmount, vAdditionalPFMCurrency
	FROM	remcon.tAgreement
	WHERE	cId = vAgreement;
	
	IF(vAdditionalPFMCurrency = 1) THEN
		SET vAdditionalPFMCLP = vAdditionalPFMAmount * vUF;
	ELSE
		SET vAdditionalPFMCLP = vAdditionalPFMAmount;
	END IF;
	
	UPDATE	remcon.tBookDiscounts
	SET		cAdditionalPFMAmount = vAdditionalPFMAmount,
			cAdditionalPFMCurrency = vAdditionalPFMCurrency,
			cAdditionalPFMCLP = vAdditionalPFMCLP
	WHERE	cBook = pBook;
END$$

/************************/
CREATE PROCEDURE remcon.pIncome(pBook BIGINT)
BEGIN
/* =cTotalIncomeTaxable-cObligatoryQuote-APV-cHealthQuote-cUnemploymentInsuranceAmount */
	DECLARE vTotalIncomeTaxable, vObligatoryQuote, vAPV, vHealthQuote, 
			vUnemploymentInsuranceAmount DOUBLE DEFAULT 0;

	SELECT 	cTotalIncomeTaxable
	INTO	vTotalIncomeTaxable
	FROM	remcon.vBook
	WHERE	cId = pBook;

/*
	select vTotalIncomeTaxable-vObligatoryQuote-vAPV-vHealthQuote-vUnemploymentInsuranceAmount;
*/
	
	UPDATE	remcon.tBookAssets
	SET		cIncome = vTotalIncomeTaxable-vObligatoryQuote-vAPV-vHealthQuote-vUnemploymentInsuranceAmount
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pObligatoryQuote(pBook BIGINT)
BEGIN
/**
 SI(AFP=Cuprum		;cLimitTaxableForecast*11.48;
 SI(AFP=Habitat		;cLimitTaxableForecast*11.36;
 SI(AFP=Planvital	;cLimitTaxableForecast*12.36;
 SI(AFP=Provida		;cLimitTaxableForecast*11.54;
 SI(AFP=IngCapital	;cLimitTaxableForecast*11.44;
 SI(AFP=Jubilado	;cLimitTaxableForecast*0;
 SI(AFP=INP(EMPART)	;cLimitTaxableForecast*21.84;
 SI(AFP=INP(Ex-SSS)	;cLimitTaxableForecast*18.84;0))))))))
*/
	DECLARE vOut, vLimitTaxableForecast, vFactor DOUBLE DEFAULT 0;
	DECLARE vPFMHistory BIGINT DEFAULT 0;
	
	SELECT	cLimitTaxableForecast, cPFMHistory
	INTO	vLimitTaxableForecast, vPFMHistory
	FROM	remcon.vBook
	WHERE	cId = pBook;
		
	SELECT	cFactor
	INTO	vFactor
	FROM	remcon.tPFMHistory
	WHERE	cId = vPFMHistory;
	
	SET	vOut = vLimitTaxableForecast * (vFactor/100);
	
	UPDATE	remcon.tBookDiscounts
	SET		cObligatoryQuote = vOut
	WHERE	cBook = pBook;
	
END$$

DELIMITER ;

