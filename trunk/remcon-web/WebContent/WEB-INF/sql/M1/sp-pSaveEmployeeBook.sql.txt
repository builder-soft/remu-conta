DROP PROCEDURE if exists remcon.pSaveEmployeeBook;
DROP FUNCTION if exists remcon.fGetGratificationAmount;
DROP FUNCTION if exists remcon.fSavePeriod;
DROP FUNCTION if exists remcon.fSaveBookForEmployee;
DROP PROCEDURE if exists remcon.pSaveOvertime;

DELIMITER $$

/************************/
CREATE PROCEDURE remcon.pSaveEmployeeBook(IN pEmployee BIGINT, IN pDate DATE, IN pWorkDays INTEGER)
BEGIN
	DECLARE pPeriod BIGINT DEFAULT 0; 
	DECLARE pBook BIGINT DEFAULT 0; 
	DECLARE pGratificationAmount DOUBLE DEFAULT 0;
	/*DECLARE pOvertimeAmount DOUBLE DEFAULT 0;*/

	SET pPeriod = remcon.fSavePeriod(pDate);
	SET pBook = remcon.fSaveBookForEmployee(pPeriod, pEmployee, pDate, pWorkDays);
	
	/*SET pOvertime = 
	*/ 
	CALL remcon.pSaveOvertime(pBook, pEmployee, pPeriod);
	
	SET pGratificationAmount = fGetGratificationAmount(pBook);
	
	select pGratificationAmount;
	
	UPDATE	remcon.tBookAssets 
	SET		cGratificationAmount = pGratificationAmount 
	WHERE	cBook = pBook;
	
	select pGratificationAmount;
END$$

/***********************
Crea o actualiza la tabla tPeriod si no existe.
*/
CREATE FUNCTION remcon.fSavePeriod(pDate DATE) RETURNS BIGINT 
BEGIN
/** 
TODO: Hay que sacar el valor de la UF y Factor desde una tabla histÃ³rica 
por si hay que recalcular para atras
*/
	DECLARE pOut BIGINT DEFAULT 0;

	SELECT	cUF, cOvertimeFactor 
	INTO	@uf, @overtimeFactor
	FROM	remcon.tMonthlyParameter
	WHERE	cDate = pDate;
	
	SELECT	cValue INTO @MinSalary
	FROM	remcon.tParameter
	WHERE	cKey = 'BASE_SALARY';

	IF EXISTS(	SELECT	cId 
				FROM	remcon.tPeriod
				WHERE	cDate = pDate) THEN
				
		UPDATE	remcon.tPeriod
		SET		cUF = @uf,
				cOvertimeFactor = @overtimeFactor,
				cMinSalary = @minSalary
		WHERE	cDate = pDate;
		
		SELECT	cId INTO pOut 
		FROM	remcon.tPeriod 
		WHERE	cDate = pDate; 
	ELSE
		INSERT INTO remcon.tPeriod(cDate, cUF, cOvertimeFactor, cMinSalary) 
		VALUES(pDate, @uf, @overtimeFactor, @minSalary);
		SET pOut = LAST_INSERT_ID();
	END IF;
	RETURN pOut;
END$$

/************************/
CREATE FUNCTION remcon.fSaveBookForEmployee(pPeriod BIGINT, pEmployee BIGINT, pDate DATE, pWorkDays INTEGER) RETURNS BIGINT
BEGIN
	SELECT		b.cId INTO @bookId
				FROM		remcon.tPeriod AS a
				LEFT JOIN	remcon.tBook AS b ON b.cPeriod = a.cId
				WHERE		b.cEmployee = pEmployee AND
							a.cDate = pDate;
	
	SELECT	cHorary, cSalaryRoot, 0,			cGratificationType 
	INTO	@horary, @salaryRoot, @overtime,	@gratificationType
	FROM	remcon.tAgreement
	WHERE	cEmployee = pEmployee;
	
	IF @bookId IS NOT NULL THEN
		UPDATE	remcon.tBook
		SET		cPeriod = pPeriod,
				cEmployee = pEmployee,
				cHorary = @horary,
				cWorkDays = pWorkDays,
				cSalaryRoot = @salaryRoot,
				cOvertime = @overtime
		WHERE	cId = @bookId;
		
		UPDATE	remcon.tBookAssets
		SET		cGratificationType = @gratificationType		
		WHERE	cId = @bookId;
	ELSE
		INSERT INTO tBook(cPeriod, cEmployee, cHorary, cWorkDays, cSalaryRoot, cOvertime)
		VALUES(pPeriod, pEmployee, @horary, pWorkDays, @salaryRoot, @overtime);
		
		SET @bookId = LAST_INSERT_ID();
		
		INSERT INTO remcon.tBookAssets(cBook, cGratificationType)
		VALUES(@bookId, @gratificationType);
		
	END IF;
	RETURN @bookId;
END$$

/************************/
CREATE PROCEDURE remcon.pSaveOvertime(IN pBook BIGINT, IN pEmployee BIGINT, IN pPeriod BIGINT)
BEGIN
	DECLARE pHours INTEGER DEFAULT 0;

	SELECT	SUM(cHours) INTO pHours 
	FROM	remcon.tOvertime
	WHERE	cEmployee = pEmployee AND 
			cPeriod = pPeriod;
	
	IF(pHours IS NULL) THEN
		SET pHours = 0;
	END IF;
	
	UPDATE	remcon.tBook 
	SET		cOvertime = pHours
	WHERE	cPeriod = pPeriod;
	
END$$

/************************/
CREATE FUNCTION remcon.fGetGratificationAmount(pBook BIGINT) RETURNS DOUBLE
BEGIN
	DECLARE pOut DOUBLE DEFAULT 0;
	
	SELECT	cGratificationType, cSalaryReceived, cMinSalary, cOvertimeAmount, cParticipation,
			cB01, cB02, cB03, cB04, cB05, cB06, cB07, cB08, cB09, cB10
	INTO	@GratificationType, @SalaryReceived, @minSalary, @overtimeAmount, @participation,
			@B01, @B02, @B03, @B04, @B05, @B06, @B07, @B08, @B09, @B10
	FROM	remcon.vBook
	WHERE	cId = pBook;
	 
	IF(@GratificationType = 1) THEN /* Sin Gratificacion */
		SET pOut = 0;
		
	ELSEIF (@GratificationType = 2) THEN /* Gratificacion : 25% Impo. (Tope 4,75imm/12)*/
		SET @limit =  4.75 * @minSalary;
		
		SET @sumGratificaion =	@SalaryReceived + @overtimeAmount + @participation + 
								@B01 + @B02 + @B03 + @B04 + @B05 + 
								@B06 + @B07 + @B08 + @B09 + @B10;
								
		IF(@sumGratification * 0.25 > @limit) THEN
			SET pOut = @sumGratification * 0.25;
		ELSE
			SET pOut = @sumGratificaion;
		END IF;
	ELSE /*IF (@GratificationType = 3) THEN / * Por antiguedad */
		SET pOut = @SalaryReceived * 0.25;
		
	END IF;
	
	
	RETURN pOut;
END$$

DELIMITER ;
