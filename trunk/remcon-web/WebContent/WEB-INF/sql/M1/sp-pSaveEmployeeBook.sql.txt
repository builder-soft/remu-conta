DROP PROCEDURE if exists remcon.pSaveOvertime;
DROP PROCEDURE IF EXISTS remcon.getGratificationAmount;
DROP PROCEDURE if exists remcon.pSaveEmployeeBook;
DROP FUNCTION if exists remcon.fGetGratificationAmount;
DROP FUNCTION if exists remcon.fSaveBookForEmployee;
DROP FUNCTION IF EXISTS remcon.fSalaryReceived;
DROP FUNCTION IF EXISTS remcon.fTotalIncomeTaxable;
DROP FUNCTION IF EXISTS remcon.fGetOvertimeAmount;

DELIMITER $$

/************************/
CREATE PROCEDURE remcon.pSaveEmployeeBook(IN pEmployee BIGINT, IN pDate DATE, IN pWorkDays INTEGER)
BEGIN
	DECLARE vPeriod BIGINT DEFAULT 0; 
	DECLARE vBook BIGINT DEFAULT 0; 
	DECLARE vSalaryReceived DOUBLE DEFAULT 0; 
	DECLARE vGratificationAmount DOUBLE DEFAULT 0;
	DECLARE vTotalIncomeTaxable DOUBLE DEFAULT 0;
	DECLARE vOvertimeAmount DOUBLE DEFAULT 0;

	SELECT	cId
	INTO	vPeriod
	FROM	remcon.tPeriod
	WHERE	cDate = pDate;

	SET vBook = remcon.fSaveBookForEmployee(vPeriod, pEmployee, pWorkDays);
		
	CALL remcon.pSaveOvertime(vBook, pEmployee, vPeriod);
	
	SET vSalaryReceived = fSalaryReceived(vBook);
	SET vGratificationAmount = fGetGratificationAmount(vBook);
	SET vTotalIncomeTaxable = fTotalIncomeTaxable(vBook);
	SET vOvertimeAmount = fGetOvertimeAmount(vBook);
	
	UPDATE	remcon.tBookAssets 
	SET		cGratificationAmount = vGratificationAmount,
			cTotalIncomeTaxable = vTotalIncomeTaxable,
			cOvertimeAmount = vOvertimeAmount
	WHERE	cBook = vBook;

	UPDATE	remcon.tBook 
	SET		cSalaryReceived = vSalaryReceived 
	WHERE	cId = vBook;
	
END$$

/************************/
CREATE FUNCTION remcon.fTotalIncomeTaxable(pBook BIGINT) RETURNS DOUBLE
BEGIN
	DECLARE pOut DOUBLE DEFAULT 0;

	SELECT	cB01 + cB02 + cB03 + cB04 + cB05 + 
			cB06 + cB07 + cB08 + cB09 + cB10 +
			cGratificationAmount + cSalaryReceived 
	INTO	pOut
	FROM	remcon.vBook
	WHERE	cId = pBook;

	RETURN pOut;
END$$

/************************/
CREATE FUNCTION remcon.fSalaryReceived(pBook BIGINT) RETURNS DOUBLE
BEGIN
	DECLARE pOut DOUBLE DEFAULT 0;
	
	SELECT	(cSalaryRoot / 30) * cWorkDays INTO pOut
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	RETURN pOut;
END$$


/************************/
CREATE FUNCTION remcon.fSaveBookForEmployee(pPeriod BIGINT, pEmployee BIGINT, pWorkDays INTEGER) RETURNS BIGINT
BEGIN
	DECLARE vOut, vHorary, vGratificationType BIGINT DEFAULT 0;
	DECLARE vSalaryRoot DOUBLE DEFAULT 0;
	
	SELECT		b.cId 
	INTO		vOut
	FROM		remcon.tPeriod	AS a
	LEFT JOIN	remcon.tBook	AS b ON b.cPeriod = a.cId
	WHERE		b.cEmployee = pEmployee AND
				a.cId = pPeriod;

	SELECT	cHorary, cSalaryRoot, cGratificationType 
	INTO	vHorary, vSalaryRoot, vGratificationType
	FROM	remcon.tAgreement
	WHERE	cEmployee = pEmployee;

	IF (vOut != 0) THEN
		UPDATE	remcon.tBook
		SET		cPeriod = pPeriod,
				cEmployee = pEmployee,
				cHorary = vHorary,
				cWorkDays = pWorkDays,
				cSalaryRoot = vSalaryRoot,
				cOvertime = 0
		WHERE	cId = vOut;
		
		UPDATE	remcon.tBookAssets
		SET		cGratificationType = vGratificationType		
		WHERE	cBook = vOut;
		
	ELSE
		INSERT INTO remcon.tBook(cPeriod, cEmployee, cHorary, cWorkDays, cSalaryRoot, cOvertime)
		VALUES(pPeriod, pEmployee, vHorary, pWorkDays, vSalaryRoot, 0);
		SET vOut = LAST_INSERT_ID();
		
		INSERT INTO remcon.tBookAssets(cBook, cGratificationType)
		VALUES(vOut, vGratificationType);
	END IF;

	RETURN vOut;
END$$

/************************/
CREATE PROCEDURE remcon.pSaveOvertime(IN pBook BIGINT, IN pEmployee BIGINT, IN pPeriod BIGINT)
BEGIN
	DECLARE pHours INTEGER DEFAULT 0;

	SELECT	SUM(cHours) INTO pHours 
	FROM	remcon.tOvertime
	WHERE	cEmployee = pEmployee AND 
			cPeriod = pPeriod;
	
	IF(pHours IS NULL) THEN
		SET pHours = 0;
	END IF;
	
	UPDATE	remcon.tBook 
	SET		cOvertime = pHours
	WHERE	cId = pBook;
	
END$$

/************************/
CREATE FUNCTION remcon.fGetGratificationAmount(pBook BIGINT) RETURNS DOUBLE
BEGIN
	DECLARE vOut, vSalaryReceived, vMinSalary, vOvertimeAmount, vParticipation,
			vB01, vB02, vB03, vB04, vB05, vB06, vB07, vB08, vB09, vB10,
			vLimit, vSumGratificaion DOUBLE DEFAULT 0;
	DECLARE vGratificationType BIGINT DEFAULT 0;
	
	SELECT	cGratificationType, cSalaryReceived, cMinSalary, cOvertimeAmount, cParticipation,
			cB01, cB02, cB03, cB04, cB05, cB06, cB07, cB08, cB09, cB10
	INTO	vGratificationType, vSalaryReceived, vMinSalary, vOvertimeAmount, vParticipation,
			vB01, vB02, vB03, vB04, vB05, vB06, vB07, vB08, vB09, vB10
	FROM	remcon.vBook
	WHERE	cId = pBook;
	 
	IF(vGratificationType = 1) THEN /* Sin Gratificacion */
		SET vOut = 0;
		
	ELSEIF (vGratificationType = 2) THEN /* Gratificacion : 25% Impo. (Tope 4,75imm/12)*/
		SET vLimit =  4.75 * vMinSalary;
		
		SET vSumGratificaion =	vSalaryReceived + vOvertimeAmount + vParticipation + 
								vB01 + vB02 + vB03 + vB04 + vB05 + 
								vB06 + vB07 + vB08 + vB09 + vB10;
								
		IF(vSumGratificaion * 0.25 > vLimit) THEN
			SET vOut = vLimit;
		ELSE
			SET vOut = vSumGratificaion * 0.25;

		END IF;
				
	ELSE /* Por antiguedad */
		SET vOut = vSalaryReceived * 0.25;
	END IF;
	
	RETURN vOut;
END$$

/************************/
CREATE FUNCTION remcon.fGetOvertimeAmount(pBook BIGINT) RETURNS DOUBLE
BEGIN
	DECLARE pOut DOUBLE DEFAULT 0;

	SELECT 	(a.cSalaryRoot * b.cOvertimeFactor) * a.cOvertime
	INTO	pOut 
	FROM	remcon.tBook		AS a
	LEFT JOIN remcon.tPeriod	AS b ON a.cPeriod = b.cId
	WHERE	a.cId = pBook;
	
	RETURN pOut;
END$$

DELIMITER ;
