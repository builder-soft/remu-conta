use remcon;

CREATE TABLE IF NOT EXISTS tBranch(
	cId					BIGINT  NOT NULL AUTO_INCREMENT PRIMARY KEY,
	cName				VARCHAR(50),
	cEnterprise			BIGINT,
	cAddress			VARCHAR(100),
	cComuna				BIGINT,
	cPhone				VARCHAR(15)
) ENGINE=innoDB;

/**
Ejemplo de archivo a cargar
RUT       FechaHora como Long
128706682-12345678901234567890.docx

C:\archivos\	-> Configuracion
           \1	-> (id de categoria) Categoria Curriculums
           \2	-> Fotos
           	 \128706682-12345678901234567890.png -> Foto carnet del empleado 12870668-2

*/
CREATE TABLE IF NOT EXISTS tFile (
	cId				BIGINT  NOT NULL AUTO_INCREMENT PRIMARY KEY,
	cDesc			VARCHAR(100) COMMENT 'Descripcion que ingresa el usuario',
    cFileName		VARCHAR(40) NOT NULL COMMENT 'Nombre del archivo que se subio, ej. foto-01.jpg',
    cFileRealName	VARCHAR(50) NOT NULL COMMENT 'Archivo en el disco 128706682-12345678901234567890.png',
    cSize			BIGINT NOT NULL COMMENT 'Tamaño del archivo',
    cFileCategory	BIGINT
) ENGINE=innoDB;

/*
Categoria de archivo.
*/
CREATE TABLE IF NOT EXISTS tFileCategory (
	cId				BIGINT  NOT NULL AUTO_INCREMENT PRIMARY KEY,
	cName			VARCHAR(100) NOT NULL
) ENGINE=innoDB;

CREATE TABLE `tParameter` (
  `cId` BIGINT PRIMARY KEY UNIQUE AUTO_INCREMENT,
  `cKey` 		varchar(20) NOT NULL,
  cLabel		varchar(100) NOT NULL,
  `cValue`		Varchar(100) NOT NULL,
  cDataType		BIGINT NOT NULL
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS tRol (
	cId			BIGINT  NOT NULL AUTO_INCREMENT PRIMARY KEY,
	cName		VARCHAR(50) NULL ,
	cDeleted	BIT NOT NULL DEFAULT 0
) ENGINE=innoDB;

CREATE TABLE IF NOT EXISTS tR_UserRol (
	cUser 		BIGINT NOT NULL,
	cRol		BIGINT NOT NULL,
	PRIMARY KEY(cUser,cRol)
) ENGINE=innoDB;

CREATE TABLE IF NOT EXISTS tOption (
	cId			BIGINT  NOT NULL AUTO_INCREMENT,
	cKey		VARCHAR(20) NOT NULL UNIQUE,
	cLabel 		VARCHAR(50) NOT NULL,
	cUrl		VARCHAR(100) NULL,
	cParent		BIGINT NULL,
	cType		BIGINT NOT NULL DEFAULT '1',
	PRIMARY KEY(cId)
) ENGINE=innoDB;

CREATE TABLE IF NOT EXISTS tR_RolOption (
	cRol		BIGINT NOT NULL,
	cOption		BIGINT NOT NULL,
	PRIMARY KEY(cRol, cOption)
) ENGINE=innoDB;

CREATE TABLE tComuna (
  `cId` BIGINT UNIQUE AUTO_INCREMENT,
  `cName` varchar(50) NOT NULL,
  `cRegion` Integer NOT NULL,
  `cPrioridad` Integer NOT NULL DEFAULT '0',
	PRIMARY KEY(cId)  
) ENGINE=InnoDB;

CREATE TABLE `tBoard` (
  `cId` BIGINT UNIQUE AUTO_INCREMENT,
  `cType` varchar(15) NOT NULL,
  `cKey` varchar(15) DEFAULT '',
  `cValue` Varchar(200) NOT NULL,
  cEnable BIT NOT NULL DEFAULT 1,
	PRIMARY KEY(cId),
	UNIQUE TypeAndKey (cType, cKey)
) ENGINE=InnoDB;

CREATE TABLE `tCountry` (
 	cId	 BIGINT UNIQUE AUTO_INCREMENT,
 	cCode char(3) NOT NULL DEFAULT '' UNIQUE,
 	cName varchar(60) NOT NULL DEFAULT '',
	PRIMARY KEY(cId)
) ENGINE=InnoDB;
 
 /* Crea tabla Empleados */
create table tEmployee (
	cId					BIGINT(20)  NOT NULL auto_increment, 
	cRut				VARCHAR(11) NOT NULL unique,
	cName				VARCHAR(20) NOT NULL,
	cLastName1			VARCHAR(20) NOT NULL,
	cLastName2			VARCHAR(20) NOT NULL,
	cBirthDate			DATE COMMENT 'Fecha de nacimiento',
	cAddress			VARCHAR(100) COMMENT 'Direccion particular',
	cGenere				BIGINT(20) NOT NULL COMMENT 'Genero Femenino o Masculino',
	cComuna				BIGINT(20) NOT NULL,
	cCountry			BIGINT(20) NOT NULL COMMENT 'Nacionalidad',
	cPhone				VARCHAR(10),
	cMaritalStatus		BIGINT(20) NOT NULL COMMENT 'Estado Civil',
	cMovil				VARCHAR(10),
	cEmail				VARCHAR(50),
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

create table tAgreement(
	cId					BIGINT(20) NOT NULL auto_increment, 
	cEmployee			BIGINT(20) NOT NULL UNIQUE	COMMENT 'Id del empleado',
	cContractType		BIGINT(20) NOT NULL 	COMMENT 'Tipo de contrato: fijo o indefinido',
	cStartContract		DATE NOT NULL 			COMMENT 'Inicio de contrato',
	cEndContract		DATE NULL 				COMMENT 'Fin de contrato',
	cProfile			BIGINT(20) NOT NULL 	COMMENT 'Cargo de la persona',
	cSalaryRoot			DOUBLE NOT NULL DEFAULT '1' COMMENT 'Sueldo Base',
	cPFM				BIGINT(20) NOT NULL		COMMENT 'AFP',
	cHealth				BIGINT(20) NOT NULL		COMMENT 'Sistema de salud, isapre o fonasa',
	cGratificationType	BIGINT(20) NOT NULL 	COMMENT 'Tipo de gratificacion',
	cPaymentType		BIGINT(20) NOT NULL 	COMMENT 'Tipo de pago',
	cHorary				BIGINT(20) NOT NULL 	COMMENT 'Tipo de jornada, full-time o part-time (tHorary)',
	cMobilization		DOUBLE DEFAULT '0'		COMMENT 'Movilizacion',
	cFeeding			DOUBLE DEFAULT '0'		COMMENT 'Alimentacion',
	cExBoxSystem		BIGINT(20) NULL			COMMENT 'Caja Ex-Regimen',
	cExBoxSystemPRC		DOUBLE NULL				COMMENT 'Porcentaje de Caja Ex-Regimen (esto debiera ir a otra tabla al parecer)',
	cAdditionalHealthUF	DOUBLE NOT NULL DEFAULT '0'	COMMENT 'Adicional sistema de salud, en UF',
	cAdditionalHealthCLP	DOUBLE NOT NULL DEFAULT '0'	COMMENT 'Adicional sistema de salud, en Pesos chilenos',
	cSimpleLoads		INTEGER	NOT NULL DEFAULT '0' 	COMMENT 'Cargas Simples',
	cDisabilityBurdens	INTEGER	NOT NULL DEFAULT '0' 	COMMENT 'Cargas Invalidez',
	cMaternalLoads		INTEGER	NOT NULL DEFAULT '0' 	COMMENT 'Cargas Maternales',
	PRIMARY KEY (cId)
)ENGINE=InnoDB;

create table tEnterprise (
	cId					BIGINT(20)  NOT NULL auto_increment, 
	cRut				VARCHAR(11) NOT NULL UNIQUE,
	cName				VARCHAR(30) NOT NULL  COMMENT 'Nombre o razon social',
	cLegalRep			VARCHAR(50) NOT NULL  COMMENT 'Representante legal',
	cRutLegalRep		VARCHAR(11) NOT NULL  COMMENT 'Rut del representante legal',
	cCategory			VARCHAR(50)  COMMENT 'Giro o Rubro',
	cAddress			VARCHAR(100),
	cComuna				BIGINT(20) NOT NULL,
	cPhone				VARCHAR(10),
	cMutual				BIGINT(20) NOT NULL,
	cMutualFactor		DOUBLE COMMENT 'Factor de Mutual, varía de empresa en empresa',
	cCompensationFund	BIGINT(20) NOT NULL COMMENT 'Caja de compensacion',
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

create table tCostCenter(
	cId 				BIGINT(20) NOT NULL auto_increment, 
	cName				VARCHAR(20) NOT NULL,
	cBranch				BIGINT(20) NOT NULL,
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

create table tContractType(
	cId 				BIGINT(20) NOT NULL auto_increment, 
	cName				VARCHAR(20) NOT NULL,
	cBody				LONGTEXT,
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

create table tProfile (
	cId					BIGINT(20) NOT NULL auto_increment, 
	cName				VARCHAR(20) NOT NULL,
	cCostCenter			BIGINT(20) NOT NULL,
	cCompanyCost		DOUBLE NOT NULL,
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

/*
Administadora de fondos de pension, en ingles se escribe como "Pension Fund Manager" (PFM), 
de aqui el nombre de la tabla.
En esta tabla se van a registrar los atributos especiales, los nombres de las AFP, estan en la tabla tBoard 
*/
create table tPFMAttribute(
	cId				BIGINT(20) NOT NULL auto_increment, 
	cPFM			BIGINT(20) NOT NULL,
	cFactor			DOUBLE NOT NULL,
	cSIS			DOUBLE NOT NULL,
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

create table tHealthAttribute (
	cId				BIGINT(20) NOT NULL auto_increment, 
	cHealth			BIGINT(20) NOT NULL,
	cFactor			DOUBLE NOT NULL,
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

/*
En esta tabla se graban para cada Employee:
	- Los APV
	- La cuenta2
	- El adicional de salud (son 3: CLP, UF y/o %).
	- Metodo de pago
*/
create table tAccount (
	cId				BIGINT(20) NOT NULL auto_increment,
	cEmployee		BIGINT(20) NOT NULL, 
	cInstitution	BIGINT(20) NOT NULL,
	cAccountType	BIGINT(20) NOT NULL,
	cNumber			VARCHAR(15),
	cCurrency		BIGINT(20) NOT NULL,
	cAmount			DOUBLE,	
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

create table tGratificationType(
	cId			BIGINT(20) NOT NULL auto_increment,
	cName		VARCHAR(50) NOT NULL,
	cPolynomial	VARCHAR(200) NULL,
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

create table tHorary(
	cId			BIGINT(20) NOT NULL auto_increment,
	cName		VARCHAR(50) NOT NULL,
	cDetail		VARCHAR(500) NULL,
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

/**
La tabla tPeriod sirve para identificar los períodos para los cuales existe cálculo, y 
los parámetros que aplican en forma general.
*/
create table tPeriod(
	cId					BIGINT(20) NOT NULL auto_increment,
	cDate				DATE 	NOT NULL,
	cUF					DOUBLE	NOT NULL,
	cOvertimeFactor		DOUBLE COMMENT 'Para calcular las horas extras, puede ser 0.07777 o 0.0333',
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

/*
Esta tabla tiene todos los empleados agrupados por período.
*/
create table tBook(
	cId					BIGINT(20) NOT NULL auto_increment,
	cPeriod				BIGINT(20) NOT NULL COMMENT 'Enlace con la tabla tPeriod - 01/Mes/Año',
	cEmployee			BIGINT(20) NOT NULL COMMENT 'Empleado - tEmployee.cId',
	cHorary				BIGINT(20) NOT NULL COMMENT 'Tipo de jornada: part-time / full-time - tAgreement.cHoray',
	cWorkDays			INTEGER NOT NULL DEFAULT '30' COMMENT 'Días trabajados - Ingresa por el período',
	cSalaryRoot			BIGINT(20) NOT NULL COMMENT 'Sueldo Base - tAgreement.cSalaryRoot',
	cOvertime			INTEGER	NOT NULL DEFAULT '0' COMMENT 'Cantidad Horas Extras - Sumar tabla tOvertime',
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

/*
Tabla del libro con los Haberes
*/
create table tBookAssets(
	cId							BIGINT(20) NOT NULL auto_increment,
	cBook						BIGINT(20) NOT NULL,
	cGratificationType			BIGINT(20) NOT NULL COMMENT 'Tipo de Gratificación - tAgreement.cGratificationType',
	cRewardAmount				DOUBLE NOT NULL DEFAULT '0' COMMENT 'Monto Gratificacion - Basado en cGratificationType, buscar el que le corresponde(%, monto o 0)',
	cFamilyAssignmentStretch	CHAR(1)	NOT NULL DEFAULT 'A' COMMENT 'Tramo Asignacion Familiar - Se ingresa por empleado, [A/B/C/D]',
/*
Tramo SE INGRESA A MANO LA LETRA "A,B,C,D" ya que es la caja de
compensacion la que determina el tramo al que pertenece el trabajor
No se calcula
*/
	cOvertimeAmount				DOUBLE NOT NULL DEFAULT '0' COMMENT 'Monto Horas Extras - Calculo en base a tBook.cOvertime',
	cParticipation				DOUBLE NOT NULL DEFAULT '0' COMMENT 'Aplica cuando tiene participacion en empresa - Ingreso por período',
	cB01						DOUBLE NOT NULL DEFAULT '0' COMMENT 'Bono 1 - Se ingresa por período, o copiar del mes anterior',
	cB02						DOUBLE NOT NULL DEFAULT '0',
	cB03						DOUBLE NOT NULL DEFAULT '0',
	cB04						DOUBLE NOT NULL DEFAULT '0',
	cB05						DOUBLE NOT NULL DEFAULT '0',
	cB06						DOUBLE NOT NULL DEFAULT '0',
	cB07						DOUBLE NOT NULL DEFAULT '0',
	cB08						DOUBLE NOT NULL DEFAULT '0',
	cB09						DOUBLE NOT NULL DEFAULT '0',
	cB10						DOUBLE NOT NULL DEFAULT '0',
	cExtraPay					DOUBLE NOT NULL DEFAULT '0' COMMENT 'Aguinaldo - Se ingresa por período',
	cFamilyAssignment			INTEGER NOT NULL DEFAULT '0' COMMENT 'Cargas Familiares - tAgreement.CAMPO_NUEVO',
	cFamilyAssignmentAmount 	DOUBLE NOT NULL DEFAULT '0' COMMENT 'Monto Por Cargas - Calcular',
	cRetroactiveFamily			DOUBLE NOT NULL DEFAULT '0' COMMENT 'Familiar Retroactivo - Se ingresa por período',
	cFeeding					DOUBLE NOT NULL DEFAULT '0' COMMENT 'Colación - Se ingresa por período',
	cMobilization				DOUBLE NOT NULL DEFAULT '0' COMMENT 'Movilización - Se ingresa por período',
	cBounty               		DOUBLE NOT NULL DEFAULT '0' COMMENT 'Viaticos - Se ingresa por período',
	cMonthNotification			DOUBLE NOT NULL DEFAULT '0' COMMENT 'Mes De Aviso - Se ingresa por período',
	cIAS 						DOUBLE NOT NULL DEFAULT '0' COMMENT 'Indemnisacion años de servicio - Se ingresa por período',
	cProportionalHoliday		DOUBLE NOT NULL DEFAULT '0' COMMENT 'Feriado Proporcional - Hay que calcularlo?',
/*
Formula: (Meses Trabajados/30) * 1.75 * Imponible - Horas Extras - Gratificacion
este valor se GUARDA y NO SE MUESTRA EN LA LIQUIDACION EMPRESA pero si
se contabilizará en una cuenta contable
*/
	cVoluntaryindenmization		DOUBLE NOT NULL DEFAULT '0' COMMENT 'Indemnisacion Voluntaira - Se ingresa por período',
	PRIMARY KEY (cId)
) ENGINE=InnoDB;


/*************************************
Tabla de libro con descuentos.
/ *
hay 2 seguros
S.I.S. = es un % (1.87) lo entrega el previred es de costo del trabajador, se paga a la AFP (parametro del mes)
Seguro de Invalidez de la Mutual
Es un % que fija la mutual en base al indice de siniestralidad, lo paga el empleador a la mutual, (parametro mensual x cada mutual), nota este parametro no cambia todos los meses. No se imprime en la liquidacion pero se contabiliza como parte del costo empresa
* /
create table tBookDiscounts(
	cId								BIGINT(20) NOT NULL auto_increment,
	cBook							BIGINT(20) NOT NULL,
	cPFM							BIGINT(20) NOT NULL COMMENT 'Código de AFP',
	cObligatoryInsurance			DOUBLE NOT NULL DEFAULT '0' COMMENT 'Seguro Obligatorio - Es un % ',
	cAVPAmount						DOUBLE NOT NULL DEFAULT '0' COMMENT 'Monto APV - Suma de todos los montos en APV, algunos traducir a pesos desde UF',
	cAccount2						DOUBLE NOT NULL DEFAULT '0' COMMENT 'Cuenta 2, Ahorro AFP - Se saca de la tabla tAccount',
	cLimitTaxableForecast		COMMENT 'Tope Imponible Previsional - Parámetro del mes, hay que buscar el valor por tramos',
	cLimitTaxableDismissInsurance	COMMENT 'Tope Imponible Seguro Cesantia - Parámetro del mes, es un valor fijo',
	cHealth							COMMENT 'Codigo de sistema de salud - Es la Isapre',
	
	cCotizacionLegal				COMMENT ' - Es el 7% del imponible, el valor es calculado',
	
	cMonedaPlanHealth				COMMENT 'UF o CLP - tAgreement.cAdditionalHealthCLP/UF',
	cPlanPactadoHealth				COMMENT 'Monto pactado de salud - Relacionado con campo cMonedaPlanHealth',
	
	cCotizacionAdicional			COMMENT 'Diferencia entre el plan de salud y la legal - cCotizacionLegal - PlanPactado',
/ *
Cotizacion Salud Rebaja
Tope 4.2 UF (parametro puede variar)
"Sí, la cotización adicional de salud, superior al 7%, aplicada a una renta imponible de 67,4 UF a contar de enero 2012, es tributable para los efectos del Impuesto Único, pues permite rebajar por concepto de cotización de salud hasta 4,72 UF (67,4 UF por 7%)."
Si alguien tiene un plan muy caro de salud debe tributar como impuesto unico a la renta el excedente
* /	
	cCotisacionSaludRebaja			COMMENT 'Preguntar que es',
	cTipoSeguroCesantia				COMMENT 'Sin seguro, contrato indefinido o a plazo',
/ *
Seguro Sesantia
Hay 3 tipos:
 1.Sin seguro
 2.Contrato a Plazo = el empleador cancela el 3% del imponible como
seguro de sesantia
 3.Contrato indefinido = el empleador cubre un 2.4% y el 0.6% lo
cancela el trabajador (descuento)
La columna en el libro de remuneraciones se llama Aporte Patronal se
contabiliza y no se imprime en la liquidacion, salvo el 0.6% cuando
corresponde (es costo empresa).
 Ojo tiene tope en UF ese tope lo da el previred y puede cambiar en el año
el 3% (2.4 + 0.6) es ley y tambien podria cambiar por tanto dejar como
parametro del mes (obvio)
* /
	cMontoSeguroCesantia
	cImpuestoUnico
	cAnticipoSueldo
	cAnticipoViatico
	cPrestamoEmpresa
	cPrestamoCajaCompenzacion
	cAhorroCajaCompenzacion
	cRetencionesJudiciales
	PRIMARY KEY (cId)
) ENGINE=InnoDB;

EN LA VISTA:
DROP VIEW IF EXISTS vBook;
CREATE VIEW vBook
AS
SELECT a.*, b.*, c.*,
	cTotalIncomeNoTaxable,		/* Total Haberes Imponibles * /
	cIncome                            /* Renta Afecta * /,
	cTotalIncomeNoTaxable			/* Total Haberes No Imponibles * /,
	cTotalIncome					/* Total Haberes * /,
	*CotizacionAdicional			/*  * /,
	*SubtotalDescuentosLegales,
	*SubTotalOtrosDescuentos,
	*TotalDescuentos,
	*AlcanceLiquido,
	*SueldoGanado,
	*LiquidoPagar,
FROM	remcon.tBook AS a
LEFT JOIN remcon.tBookAssets AS b ON b.cBook = a.cId
LEFT JOIN remcon.tBookDiscounts AS c ON ON c.cBook = a.cId;
**************************************/

 /** V I S T A S **/

DROP VIEW IF EXISTS vDataType;
CREATE VIEW vDataType
AS
	SELECT cId, cValue AS cName 
	FROM tBoard 
	WHERE cType='DATA_TYPE';


DROP VIEW IF EXISTS vType;
DROP VIEW IF EXISTS vTypeOption;
CREATE VIEW vTypeOption
AS
	SELECT cId, cValue AS cName 
	FROM tBoard 
	WHERE cType='TYPE_OPTION';

DROP VIEW IF EXISTS vMaritalStatus;
CREATE VIEW vMaritalStatus
AS
	SELECT cId, cValue AS cName 
	FROM tBoard 
	WHERE cType='MARITAL_STATUS';

DROP VIEW IF EXISTS vGenere;
CREATE VIEW vGenere
AS
	SELECT cId, cValue AS cName 
	FROM remcon.tBoard 
	WHERE cType='GENERE';

DROP VIEW IF EXISTS vCurrency;
CREATE VIEW vCurrency
AS
	SELECT cId, cValue AS cName 
	FROM remcon.tBoard 
	WHERE cType='CURRENCY';

DROP VIEW IF EXISTS vMutual;
CREATE VIEW vMutual
AS
	SELECT cId, cValue AS cName 
	FROM remcon.tBoard 
	WHERE cType='MUTUAL';

DROP VIEW IF EXISTS vPFM;
CREATE VIEW vPFM
AS
	SELECT	a.cId, a.cKey, a.cValue AS cName, a.cEnable, b.cFactor, b.cSIS 
	FROM remcon.tBoard AS a
	LEFT JOIN remcon.tPFMAttribute AS b ON a.cId = b.cPFM
	WHERE a.cType='PFM';
 
DROP VIEW IF EXISTS vHealth;
CREATE VIEW vHealth
AS
	SELECT	a.cId, a.cKey, a.cValue AS cName, a.cEnable, b.cFactor
	FROM remcon.tBoard AS a
	LEFT JOIN remcon.tHealthAttribute AS b ON a.cId = b.cHealth
	WHERE a.cType='HEALTH';
 
DROP VIEW IF EXISTS vPaymentType;
CREATE VIEW vPaymentType
AS
	SELECT cId, cValue AS cName 
	FROM remcon.tBoard 
	WHERE cType='PAYMENT_TYPE';
 
 
DROP VIEW IF EXISTS vAccountType;
/*
CREATE VIEW vAccountType
AS
	SELECT cId, cKey, cValue AS cName 
	FROM remcon.tBoard 
	WHERE cType='ACCOUNT_TYPE';
*/
DROP VIEW IF EXISTS vCompensationFound;
DROP VIEW IF EXISTS vCompensationFund;
CREATE VIEW vCompensationFund
AS
	SELECT cId, cValue AS cName 
	FROM remcon.tBoard 
	WHERE cType='COMPENSATION';

DROP VIEW IF EXISTS vMutual;
CREATE VIEW vMutual
AS
	SELECT cId, cValue AS cName 
	FROM remcon.tBoard 
	WHERE cType='MUTUAL';

DROP VIEW IF EXISTS vAPV;
CREATE VIEW vAPV
AS
	SELECT cId, cValue AS cName 
	FROM remcon.tBoard 
	WHERE cType='APV';


  