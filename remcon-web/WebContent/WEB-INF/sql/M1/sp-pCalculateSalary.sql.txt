DROP PROCEDURE if exists remcon.pCalculateSalary;
DROP PROCEDURE if exists remcon.pSaveOvertime;
DROP PROCEDURE if exists remcon.pGratificationAmount;
DROP PROCEDURE IF EXISTS remcon.pSalaryReceived;
DROP PROCEDURE IF EXISTS remcon.pTotalIncomeTaxable;
DROP PROCEDURE IF EXISTS remcon.pOvertimeAmount;
DROP PROCEDURE IF EXISTS remcon.pLimitTaxableForecast;
DROP PROCEDURE IF EXISTS remcon.pLimitTaxableDismissInsurance;
DROP PROCEDURE IF EXISTS remcon.pIncome;
DROP PROCEDURE IF EXISTS remcon.pAPV;
DROP PROCEDURE IF EXISTS remcon.pObligatoryQuote;
DROP PROCEDURE IF EXISTS remcon.pLawfulQuote;
DROP PROCEDURE IF EXISTS remcon.pAdditionalHealth;
DROP PROCEDURE IF EXISTS remcon.pUnemploymentInsuranceAmount;
DROP PROCEDURE IF EXISTS remcon.pFamilyAssignment;
DROP PROCEDURE IF EXISTS remcon.pUniqueTax;
DROP FUNCTION IF exists remcon.fSaveBookForEmployee;
DROP FUNCTION IF EXISTS remcon.fGetPFMForBook;
DROP FUNCTION IF EXISTS remcon.fGetHealthForBook;

DELIMITER $$

/************************/
CREATE PROCEDURE remcon.pCalculateSalary(IN pEmployee BIGINT, IN pDate DATE, IN pWorkDays INTEGER)
BEGIN
	DECLARE vPeriod, vBook BIGINT DEFAULT 0; 

	SELECT	cId
	INTO	vPeriod
	FROM	remcon.tPeriod
	WHERE	cDate = pDate;

	SET vBook = remcon.fSaveBookForEmployee(vPeriod, pEmployee, pWorkDays);
	
	CALL remcon.pSaveOvertime(vBook, pEmployee, vPeriod);
	CALL remcon.pSalaryReceived(vBook);
	CALL remcon.pGratificationAmount(vBook);
	CALL remcon.pOvertimeAmount(vBook);
	CALL remcon.pTotalIncomeTaxable(vBook);
	CALL remcon.pLimitTaxableForecast(vBook);
	CALL remcon.pLimitTaxableDismissInsurance(vBook);
	CALL remcon.pObligatoryQuote(vBook);
	CALL remcon.pLawfulQuote(vBook);
	CALL remcon.pAPV(vBook);
	CALL remcon.pAdditionalHealth(vBook);
	CALL remcon.pUnemploymentInsuranceAmount(vBook);
	CALL remcon.pFamilyAssignment(vBook);
	
/*	=SI(+AY13+AZ13<=(4,2*PARAMETROS!$D$10);AY13+AZ13;4,2*PARAMETROS!$D$10)*/
	
	CALL remcon.pIncome(vBook);
	CALL remcon.pUniqueTax(vBook);
	
	
END$$

CREATE PROCEDURE remcon.pUniqueTax(pBook BIGINT)
BEGIN
/*
=SI(cIncome<=TRAMO1){
	0
}else{
	SI(cIncome<=TRAMO2){
		;cIncome*FacT2-DesT2
		}else{
		;SI(cIncome<=TRAMO3){
			;cIncome*FacT3-DesT3
		}else{
			;SI(cIncome<=TRAMO4){
				;cIncome*FacT4-DesT4
			}else{
				;SI(cIncome<=TRAMO5;cIncome*FacT5-DesT5;SI(cIncome<=TRAMO6;cIncome*FacT6-DesT6;SI(cIncome<=TRAMO7;cIncome*FacT7-DesT7;cIncome*FacT8-DesT8)))))))
 */
	
	/*
	select 1;
	SELECT * FROM	tUniqueTax;
	select 2;
	*/
	DECLARE vUTM, vIncome, vUniqueTax DOUBLE DEFAULT 0;
	DECLARE vPeriod BIGINT DEFAULT 0;
	
	SELECT	cUTM, cPeriod, cIncome
	INTO	vUTM, vPeriod, vIncome
	FROM	remcon.vBook
	WHERE	cId = pBook;

select vIncome;
/*
SELECT	*, (cLimit * vUTM) AS cTo, cDiscount * vUTM AS rebaja
FROM	tUniqueTax
WHERE	cPeriod = vPeriod;

cIncome*FacT2-DesT2

SELECT	vIncome, *, (cLimit * vUTM) AS cTo, cDiscount * vUTM AS rebaja
FROM	tUniqueTax
WHERE	cPeriod = vPeriod AND cLimit * vUTM < vIncome
ORDER BY cTo DESC;
*/

SELECT	vIncome*(cLimit * vUTM)-(cDiscount * vUTM)
INTO	vUniqueTax
FROM	tUniqueTax
WHERE	cPeriod = vPeriod AND cLimit * vUTM < vIncome
ORDER BY (cLimit * vUTM) DESC
LIMIT 0,1;


	UPDATE	remcon.tBookDiscounts
	SET		cUniqueTax  = vUTM * 2
	WHERE	cBook = pBook;
	
END$$
/************************/
CREATE PROCEDURE remcon.pFamilyAssignment(pBook BIGINT)
BEGIN
	DECLARE vFamilyAssignmentCount INTEGER DEFAULT 0;
	DECLARE vAgreement, vFamilyAssignmentStretch BIGINT DEFAULT 0;
	DECLARE vFamilyAssignmentAmount, vFamilyAssignmentUnique DOUBLE DEFAULT 0;
	
	SELECT	cAgreement
	INTO	vAgreement
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	SELECT	a.cFamilyAssignmentStretch,	b.cAmount,					a.cSimpleLoads + a.cDisabilityBurdens + a.cMaternalLoads
	INTO	vFamilyAssignmentStretch,	vFamilyAssignmentUnique,	vFamilyAssignmentCount
	FROM	remcon.tAgreement AS a
	LEFT JOIN tFamilyAssignmentStretchHistory AS b ON a.cFamilyAssignmentStretch = b.cId
	WHERE	a.cId = vAgreement;
	
	SET vFamilyAssignmentAmount = vFamilyAssignmentUnique * vFamilyAssignmentCount;

	UPDATE	remcon.tBookAssets 
	SET		cFamilyAssignmentStretch = vFamilyAssignmentStretch,
			cFamilyAssignmentCount = vFamilyAssignmentCount,
			cFamilyAssignmentAmount = vFamilyAssignmentAmount
	WHERE	cBook = pBook;

END$$

/************************/
CREATE PROCEDURE remcon.pUnemploymentInsuranceAmount(pBook BIGINT)
BEGIN
	DECLARE vInsuranceFactor, vUnemploymentInsuranceAmount,
			vLimitTaxableDismissInsurance DOUBLE DEFAULT 0;
	DECLARE vContractType BIGINT DEFAULT 0;

	SELECT	cContractType, cInsuranceFactor, cLimitTaxableDismissInsurance
	INTO	vContractType, vInsuranceFactor, vLimitTaxableDismissInsurance
	FROM	remcon.vBook
	WHERE	cId = pBook;

	IF(vContractType = 1) THEN
		SET vUnemploymentInsuranceAmount = vInsuranceFactor * vLimitTaxableDismissInsurance;
	END IF;
	
	UPDATE	remcon.tBookDiscounts 
	SET		cUnemploymentInsuranceAmount = vUnemploymentInsuranceAmount
	WHERE	cBook = pBook;
	
END$$

CREATE PROCEDURE remcon.pLawfulQuote(pBook BIGINT)
/*
 * Siempre se calcula en % basado en el valor de cHealthHistory. El resto de los calculos, aplican para el complementario
 * 
 * moneda = AV13;
 * =SI(moneda=pesos) then -- nunca debe ser en $
 * 		7
 * else 
 * 		SI(moneda=UF) then
 * 			7*PARAMETROS!$D$10;
 * 		else
 * 			SI(moneda=%) then 
 * 				(7/100)*cLimitTaxableForecast
 * 			else 
 * 				0
 *			end
 *		end
 * end
 * */
BEGIN
	DECLARE vFactor, vLimitTaxableForecast DOUBLE DEFAULT 0;
	DECLARE vHealth BIGINT DEFAULT 0;

	SELECT	cHealthHistory, cLimitTaxableForecast
	INTO	vHealth, vLimitTaxableForecast
	FROM	remcon.vBook
	WHERE	cId = pBook;

	SELECT	cFactor
	INTO	vFactor
	FROM	tHealthHistory
	WHERE	cId = vHealth;
	
	UPDATE	remcon.tBookDiscounts 
	SET		cLawfulQuote = (vFactor/100) * vLimitTaxableForecast
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pAdditionalHealth(pBook BIGINT)
BEGIN
	DECLARE vAdditionalHealthCurrency, vAgreement BIGINT DEFAULT 0;
	DECLARE vAdditionalHealthAmount, vUF, vAdditionalHealthCLP, vHealthQuote,
			vLimitHealth DOUBLE DEFAULT 0;
	DECLARE vKey VARCHAR(3) DEFAULT '   ';
	
	SELECT	cAgreement, cUF, cLimitHealth
	INTO	vAgreement, vUF, vLimitHealth
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	SELECT	a.cAdditionalHealthCurrency, a.cAdditionalHealthAmount, b.cKey
	INTO	vAdditionalHealthCurrency, vAdditionalHealthAmount, vKey
	FROM	remcon.tAgreement AS a
	LEFT JOIN tCurrency AS b ON a.cAdditionalHealthCurrency = b.cId
	WHERE	a.cId = vAgreement;
	
	IF(vAdditionalHealthCurrency IS NULL) THEN
		SET vAdditionalHealthCLP = 0;
	ELSE
		IF(vKey = 'UF') THEN
			SET vAdditionalHealthCLP = vAdditionalHealthAmount * vUF;
		ELSE
			SET vAdditionalHealthCLP = vAdditionalHealthAmount;
		END IF;
	END IF;

	IF(vAdditionalHealthCLP > vLimitHealth * vUF) THEN
		SET vHealthQuote = vLimitHealth * vUF;
	ELSE
		SET vHealthQuote = vAdditionalHealthCLP;
	END IF;
	
	UPDATE	remcon.tBookDiscounts
	SET		cAdditionalHealthCurrency = vAdditionalHealthCurrency, 
			cAdditionalHealthAmount = vAdditionalHealthAmount,
			cAdditionalHealthCLP = vAdditionalHealthCLP,
			cHealthQuote = vHealthQuote
	WHERE	cBook = pBook;
	
END $$
/************************/
CREATE PROCEDURE remcon.pTotalIncomeTaxable(pBook BIGINT)
BEGIN
	DECLARE vOut DOUBLE DEFAULT 0;

	SELECT	cB01 + cB02 + cB03 + cB04 + cB05 + 
			cB06 + cB07 + cB08 + cB09 + cB10 +
			cSalaryReceived + cGratificationAmount + cOvertimeAmount 
	INTO	vOut
	FROM	remcon.vBook
	WHERE	cId = pBook;

	UPDATE	remcon.tBookAssets 
	SET		cTotalIncomeTaxable = vOut
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pSalaryReceived(pBook BIGINT)
BEGIN
	UPDATE	remcon.tBook 
	SET		cSalaryReceived = cSalaryRoot / 30 * cWorkDays 
	WHERE	cId = pBook;
	
END$$

/************************/
CREATE FUNCTION remcon.fSaveBookForEmployee(pPeriod BIGINT, pEmployee BIGINT, pWorkDays INTEGER) RETURNS BIGINT
BEGIN
	DECLARE vOut, vHorary, vGratificationType, vPFM, vHealth, vUnemploymentInsurance,
			vContractType BIGINT DEFAULT 0;
	DECLARE vSalaryRoot DOUBLE DEFAULT 0;
	
	SELECT		b.cId
	INTO		vOut
	FROM		remcon.tPeriod	AS a
	LEFT JOIN	remcon.tBook	AS b ON b.cPeriod = a.cId
	WHERE		b.cEmployee = pEmployee AND
				a.cId = pPeriod;

	SELECT	cHorary, cSalaryRoot, cGratificationType, cPFM, cHealth, cContractType
	INTO	vHorary, vSalaryRoot, vGratificationType, vPFM, vHealth, vContractType
	FROM	remcon.tAgreement
	WHERE	cEmployee = pEmployee;
	
	SET vPFM = fGetPFMForBook(vPFM, pPeriod);
	SET vHealth = fGetHealthForBook(vHealth, pPeriod);
	
	IF (vOut != 0) THEN
		UPDATE	remcon.tBook
		SET		cPeriod = pPeriod,
				cEmployee = pEmployee,
				cHorary = vHorary,
				cWorkDays = pWorkDays,
				cSalaryRoot = vSalaryRoot,
				cOvertime = 0,
				cContractType = vContractType
		WHERE	cId = vOut;
		
		UPDATE	remcon.tBookAssets
		SET		cGratificationType = vGratificationType		
		WHERE	cBook = vOut;
		
		UPDATE	remcon.tBookDiscounts
		SET		cLimitTaxableForecast = 0,
				cPFMHistory = vPFM,
				cHealthHistory = vHealth,
				cUnemploymentInsurance = vUnemploymentInsurance
		WHERE	cBook = vOut;
		
	ELSE
		INSERT INTO remcon.tBook(cPeriod, cEmployee, cHorary, cWorkDays, cSalaryRoot, cOvertime, cContractType)
		VALUES(pPeriod, pEmployee, vHorary, pWorkDays, vSalaryRoot, 0, vContractType);
		SET vOut = LAST_INSERT_ID();
		
		INSERT INTO remcon.tBookAssets(cBook, cGratificationType)
		VALUES(vOut, vGratificationType);
		
		INSERT INTO remcon.tBookDiscounts(cBook, cLimitTaxableForecast, cPFMHistory, cHealthHistory, cUnemploymentInsurance)
		VALUES(vOut, 0, vPFM, vHealth, vUnemploymentInsurance);
	END IF;

	RETURN vOut;
END$$

/************************/
CREATE FUNCTION remcon.fGetPFMForBook(pPFM BIGINT, pPeriod BIGINT) RETURNS BIGINT
BEGIN
	DECLARE vOut BIGINT DEFAULT 0;
	DECLARE vKey VARCHAR(2) DEFAULT ' ';

	SELECT 	cKey
	INTO	vKey 
	FROM	remcon.tPFM
	WHERE	cId = pPFM;

	SELECT 	cId
	INTO	vOut 
	FROM	remcon.tPFMHistory
	WHERE	cKey = vKey AND cPeriod <= pPeriod
	ORDER BY cId DESC
	LIMIT 0, 1;
	
	RETURN vOut;
END$$

/************************/
CREATE FUNCTION remcon.fGetHealthForBook(pHealth BIGINT, pPeriod BIGINT) RETURNS BIGINT
BEGIN
	DECLARE vOut BIGINT DEFAULT 0;
	DECLARE vKey VARCHAR(2) DEFAULT ' ';

	SELECT 	cKey
	INTO	vKey 
	FROM	remcon.tHealth
	WHERE	cId = pHealth;

	SELECT 	cId
	INTO	vOut 
	FROM	remcon.tHealthHistory
	WHERE	cKey = vKey AND cPeriod <= pPeriod
	ORDER BY cId DESC
	LIMIT 0, 1;
	
	RETURN vOut;
END$$

/************************/
CREATE PROCEDURE remcon.pSaveOvertime(IN pBook BIGINT, IN pEmployee BIGINT, IN pPeriod BIGINT)
BEGIN
	DECLARE pHours INTEGER DEFAULT 0;
	
	SELECT	SUM(cHours) INTO pHours 
	FROM	remcon.tOvertime
	WHERE	cEmployee = pEmployee AND 
			cPeriod = pPeriod;
	
	IF(pHours IS NULL) THEN
		SET pHours = 0;
	END IF;
	
	UPDATE	remcon.tBook 
	SET		cOvertime = pHours
	WHERE	cId = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pGratificationAmount(pBook BIGINT)
BEGIN
	DECLARE vOut, vSalaryReceived, vMinSalary, vOvertimeAmount, vParticipation,
			vB01, vB02, vB03, vB04, vB05, vB06, vB07, vB08, vB09, vB10,
			vLimit, vSumGratificaion, vLimitGratification DOUBLE DEFAULT 0;
	DECLARE vGratificationType BIGINT DEFAULT 0;
	
	SELECT	cGratificationType, cSalaryReceived, cMinSalary, cOvertimeAmount, cParticipation,
			cB01, cB02, cB03, cB04, cB05, cB06, cB07, cB08, cB09, cB10, cLimitGratification
	INTO	vGratificationType, vSalaryReceived, vMinSalary, vOvertimeAmount, vParticipation,
			vB01, vB02, vB03, vB04, vB05, vB06, vB07, vB08, vB09, vB10, vLimitGratification
	FROM	remcon.vBook
	WHERE	cId = pBook;
	 
	IF(vGratificationType = 1) THEN /* Sin Gratificacion */
		SET vOut = 0;
		
	ELSEIF (vGratificationType = 2) THEN /* Gratificacion : 25% Impo. (Tope 4,75imm/12)*/
		SET vSumGratificaion =	vSalaryReceived + vOvertimeAmount + vParticipation + 
								vB01 + vB02 + vB03 + vB04 + vB05 + 
								vB06 + vB07 + vB08 + vB09 + vB10;
								
		IF(vSumGratificaion * 0.25 > vLimitGratification) THEN
			SET vOut = vLimitGratification;
		ELSE
			SET vOut = vSumGratificaion * 0.25;

		END IF;
				
	ELSE /* Por antiguedad */
		SET vOut = vSalaryReceived * 0.25;
	END IF;
	
	UPDATE	remcon.tBookAssets 
	SET		cGratificationAmount = vOut
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pOvertimeAmount(pBook BIGINT) 
BEGIN
	DECLARE vOut DOUBLE DEFAULT 0;

	SELECT 	(a.cSalaryRoot * b.cOvertimeFactor) * a.cOvertime
	INTO	vOut 
	FROM	remcon.tBook		AS a
	LEFT JOIN remcon.tPeriod	AS b ON a.cPeriod = b.cId
	WHERE	a.cId = pBook;
	
	UPDATE	remcon.tBookAssets 
	SET		cOvertimeAmount = vOut
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pLimitTaxableForecast(pBook BIGINT)
BEGIN
	DECLARE vOut, vLimitIPSasCLP, vTotalIncomeTaxable DOUBLE DEFAULT 0;
	
	SELECT 	(cLimitIPS * cUF), cTotalIncomeTaxable 
	INTO	vLimitIPSasCLP, vTotalIncomeTaxable
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	IF(vTotalIncomeTaxable>=vLimitIPSasCLP) THEN
		SET vOut = vLimitIPSasCLP;
	ELSE
		SET vOut = vTotalIncomeTaxable;
	END IF;
	
	UPDATE	remcon.tBookDiscounts
	SET		cLimitTaxableForecast = vOut
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pLimitTaxableDismissInsurance(pBook BIGINT)
BEGIN
/* = SI(cTotalIncomeTaxable >= 90UF ; 90UF; cTotalIncomeTaxable) */
	DECLARE vTotalIncomeTaxable, vUFs, vLimit, vOut DOUBLE DEFAULT 0;

	SELECT 	cTotalIncomeTaxable, (cUF * cLimitInsurance)
	INTO	vTotalIncomeTaxable, vLimit
	FROM	remcon.vBook
	WHERE	cId = pBook;
	
	IF (vTotalIncomeTaxable >= vLimit) THEN
		SET vOut = vLimit;
	ELSE
		SET vOut = vTotalIncomeTaxable;
	END IF;
		
	UPDATE	remcon.tBookDiscounts
	SET		cLimitTaxableDismissInsurance = vOut
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pAPV(pBook BIGINT)
BEGIN
	DECLARE vAgreement, vPeriod, vAPV, vCurrency BIGINT DEFAULT 0;
	DECLARE vDone BOOLEAN DEFAULT FALSE;
	DECLARE vAmount, vUF, vSum DOUBLE DEFAULT 0;
	DECLARE vKey VARCHAR(3) DEFAULT '   ';
	DECLARE cursorAPV CURSOR FOR
		SELECT	a.cAmount, b.cKey  
		FROM	remcon.tR_AgreementAPVHistory AS a
		LEFT JOIN	remcon.tCurrency	AS b ON a.cCurrency = b.cId
		LEFT JOIN	remcon.vBook		AS c ON a.cPeriod = c.cPeriod
		WHERE	c.cId = pBook AND a.cAgreement = c.cAgreement;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET vDone = TRUE;
	
	SET vUF = (SELECT cUF FROM vBook WHERE cId = pBook);
	OPEN cursorAPV;
	cursorAPV_loop: LOOP
		FETCH cursorAPV INTO vAmount, vKey;
		
		IF(vDone) THEN 
			LEAVE cursorAPV_loop;
		END IF;
		
		IF(vKey = 'UF') THEN
			SET vAmount = vAmount * vUF;
		END IF;
	    SET vSum = vSum + vAmount;
		
	END LOOP cursorAPV_loop;
	CLOSE cursorAPV;
			
	UPDATE	remcon.tBookDiscounts
	SET		cAVPAmount = vSum
	WHERE	cBook = pBook;

END $$

/************************/
CREATE PROCEDURE remcon.pIncome(pBook BIGINT)
BEGIN
/* =cTotalIncomeTaxable-cObligatoryQuote-APV-cHealthQuote-cUnemploymentInsuranceAmount */
	DECLARE vTotalIncomeTaxable, vObligatoryQuote, vAPV, vHealthQuote, 
			vUnemploymentInsuranceAmount DOUBLE DEFAULT 0;

	SELECT 	cTotalIncomeTaxable
	INTO	vTotalIncomeTaxable
	FROM	remcon.vBook
	WHERE	cId = pBook;

/*
	select vTotalIncomeTaxable-vObligatoryQuote-vAPV-vHealthQuote-vUnemploymentInsuranceAmount;
*/
	
	UPDATE	remcon.tBookAssets
	SET		cIncome = vTotalIncomeTaxable-vObligatoryQuote-vAPV-vHealthQuote-vUnemploymentInsuranceAmount
	WHERE	cBook = pBook;
	
END$$

/************************/
CREATE PROCEDURE remcon.pObligatoryQuote(pBook BIGINT)
BEGIN
/**
 SI(AFP=Cuprum		;cLimitTaxableForecast*11.48;
 SI(AFP=Habitat		;cLimitTaxableForecast*11.36;
 SI(AFP=Planvital	;cLimitTaxableForecast*12.36;
 SI(AFP=Provida		;cLimitTaxableForecast*11.54;
 SI(AFP=IngCapital	;cLimitTaxableForecast*11.44;
 SI(AFP=Jubilado	;cLimitTaxableForecast*0;
 SI(AFP=INP(EMPART)	;cLimitTaxableForecast*21.84;
 SI(AFP=INP(Ex-SSS)	;cLimitTaxableForecast*18.84;0))))))))
*/
	DECLARE vOut, vLimitTaxableForecast, vFactor DOUBLE DEFAULT 0;
	DECLARE vPFMHistory BIGINT DEFAULT 0;
	
	SELECT	cLimitTaxableForecast, cPFMHistory
	INTO	vLimitTaxableForecast, vPFMHistory
	FROM	remcon.vBook
	WHERE	cId = pBook;
		
	SELECT	cFactor
	INTO	vFactor
	FROM	remcon.tPFMHistory
	WHERE	cId = vPFMHistory;
	
	SET	vOut = vLimitTaxableForecast * (vFactor/100);
	
	UPDATE	remcon.tBookDiscounts
	SET		cObligatoryQuote = vOut
	WHERE	cBook = pBook;
	
END$$

DELIMITER ;
